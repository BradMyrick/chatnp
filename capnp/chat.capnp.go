// Code generated by capnpc-go. DO NOT EDIT.

package chatnp

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	fc "capnproto.org/go/capnp/v3/flowcontrol"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
)

type ChatMessage capnp.Struct

// ChatMessage_TypeID is the unique identifier for the type ChatMessage.
const ChatMessage_TypeID = 0xc24e6ed9e4921b56

func NewChatMessage(s *capnp.Segment) (ChatMessage, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2})
	return ChatMessage(st), err
}

func NewRootChatMessage(s *capnp.Segment) (ChatMessage, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2})
	return ChatMessage(st), err
}

func ReadRootChatMessage(msg *capnp.Message) (ChatMessage, error) {
	root, err := msg.Root()
	return ChatMessage(root.Struct()), err
}

func (s ChatMessage) String() string {
	str, _ := text.Marshal(0xc24e6ed9e4921b56, capnp.Struct(s))
	return str
}

func (s ChatMessage) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ChatMessage) DecodeFromPtr(p capnp.Ptr) ChatMessage {
	return ChatMessage(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ChatMessage) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ChatMessage) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ChatMessage) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ChatMessage) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ChatMessage) Id() uint64 {
	return capnp.Struct(s).Uint64(0)
}

func (s ChatMessage) SetId(v uint64) {
	capnp.Struct(s).SetUint64(0, v)
}

func (s ChatMessage) Timestamp() int64 {
	return int64(capnp.Struct(s).Uint64(8))
}

func (s ChatMessage) SetTimestamp(v int64) {
	capnp.Struct(s).SetUint64(8, uint64(v))
}

func (s ChatMessage) Sender() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s ChatMessage) HasSender() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ChatMessage) SenderBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s ChatMessage) SetSender(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s ChatMessage) Content() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s ChatMessage) HasContent() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s ChatMessage) ContentBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s ChatMessage) SetContent(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

// ChatMessage_List is a list of ChatMessage.
type ChatMessage_List = capnp.StructList[ChatMessage]

// NewChatMessage creates a new list of ChatMessage.
func NewChatMessage_List(s *capnp.Segment, sz int32) (ChatMessage_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2}, sz)
	return capnp.StructList[ChatMessage](l), err
}

// ChatMessage_Future is a wrapper for a ChatMessage promised by a client call.
type ChatMessage_Future struct{ *capnp.Future }

func (f ChatMessage_Future) Struct() (ChatMessage, error) {
	p, err := f.Future.Ptr()
	return ChatMessage(p.Struct()), err
}

type ChatService capnp.Client

// ChatService_TypeID is the unique identifier for the type ChatService.
const ChatService_TypeID = 0x827f8345a5e47d64

func (c ChatService) SendMessage(ctx context.Context, params func(ChatService_sendMessage_Params) error) (ChatService_sendMessage_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x827f8345a5e47d64,
			MethodID:      0,
			InterfaceName: "capnp/chat.capnp:ChatService",
			MethodName:    "sendMessage",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(ChatService_sendMessage_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return ChatService_sendMessage_Results_Future{Future: ans.Future()}, release

}

func (c ChatService) GetMessages(ctx context.Context, params func(ChatService_getMessages_Params) error) (ChatService_getMessages_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x827f8345a5e47d64,
			MethodID:      1,
			InterfaceName: "capnp/chat.capnp:ChatService",
			MethodName:    "getMessages",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(ChatService_getMessages_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return ChatService_getMessages_Results_Future{Future: ans.Future()}, release

}

func (c ChatService) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c ChatService) String() string {
	return "ChatService(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c ChatService) AddRef() ChatService {
	return ChatService(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c ChatService) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c ChatService) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c ChatService) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (ChatService) DecodeFromPtr(p capnp.Ptr) ChatService {
	return ChatService(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c ChatService) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c ChatService) IsSame(other ChatService) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c ChatService) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c ChatService) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A ChatService_Server is a ChatService with a local implementation.
type ChatService_Server interface {
	SendMessage(context.Context, ChatService_sendMessage) error

	GetMessages(context.Context, ChatService_getMessages) error
}

// ChatService_NewServer creates a new Server from an implementation of ChatService_Server.
func ChatService_NewServer(s ChatService_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(ChatService_Methods(nil, s), s, c)
}

// ChatService_ServerToClient creates a new Client from an implementation of ChatService_Server.
// The caller is responsible for calling Release on the returned Client.
func ChatService_ServerToClient(s ChatService_Server) ChatService {
	return ChatService(capnp.NewClient(ChatService_NewServer(s)))
}

// ChatService_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func ChatService_Methods(methods []server.Method, s ChatService_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x827f8345a5e47d64,
			MethodID:      0,
			InterfaceName: "capnp/chat.capnp:ChatService",
			MethodName:    "sendMessage",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.SendMessage(ctx, ChatService_sendMessage{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x827f8345a5e47d64,
			MethodID:      1,
			InterfaceName: "capnp/chat.capnp:ChatService",
			MethodName:    "getMessages",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.GetMessages(ctx, ChatService_getMessages{call})
		},
	})

	return methods
}

// ChatService_sendMessage holds the state for a server call to ChatService.sendMessage.
// See server.Call for documentation.
type ChatService_sendMessage struct {
	*server.Call
}

// Args returns the call's arguments.
func (c ChatService_sendMessage) Args() ChatService_sendMessage_Params {
	return ChatService_sendMessage_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c ChatService_sendMessage) AllocResults() (ChatService_sendMessage_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return ChatService_sendMessage_Results(r), err
}

// ChatService_getMessages holds the state for a server call to ChatService.getMessages.
// See server.Call for documentation.
type ChatService_getMessages struct {
	*server.Call
}

// Args returns the call's arguments.
func (c ChatService_getMessages) Args() ChatService_getMessages_Params {
	return ChatService_getMessages_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c ChatService_getMessages) AllocResults() (ChatService_getMessages_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ChatService_getMessages_Results(r), err
}

// ChatService_List is a list of ChatService.
type ChatService_List = capnp.CapList[ChatService]

// NewChatService creates a new list of ChatService.
func NewChatService_List(s *capnp.Segment, sz int32) (ChatService_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[ChatService](l), err
}

type ChatService_sendMessage_Params capnp.Struct

// ChatService_sendMessage_Params_TypeID is the unique identifier for the type ChatService_sendMessage_Params.
const ChatService_sendMessage_Params_TypeID = 0x9019237c61b0b362

func NewChatService_sendMessage_Params(s *capnp.Segment) (ChatService_sendMessage_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ChatService_sendMessage_Params(st), err
}

func NewRootChatService_sendMessage_Params(s *capnp.Segment) (ChatService_sendMessage_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ChatService_sendMessage_Params(st), err
}

func ReadRootChatService_sendMessage_Params(msg *capnp.Message) (ChatService_sendMessage_Params, error) {
	root, err := msg.Root()
	return ChatService_sendMessage_Params(root.Struct()), err
}

func (s ChatService_sendMessage_Params) String() string {
	str, _ := text.Marshal(0x9019237c61b0b362, capnp.Struct(s))
	return str
}

func (s ChatService_sendMessage_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ChatService_sendMessage_Params) DecodeFromPtr(p capnp.Ptr) ChatService_sendMessage_Params {
	return ChatService_sendMessage_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ChatService_sendMessage_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ChatService_sendMessage_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ChatService_sendMessage_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ChatService_sendMessage_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ChatService_sendMessage_Params) Msg() (ChatMessage, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return ChatMessage(p.Struct()), err
}

func (s ChatService_sendMessage_Params) HasMsg() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ChatService_sendMessage_Params) SetMsg(v ChatMessage) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewMsg sets the msg field to a newly
// allocated ChatMessage struct, preferring placement in s's segment.
func (s ChatService_sendMessage_Params) NewMsg() (ChatMessage, error) {
	ss, err := NewChatMessage(capnp.Struct(s).Segment())
	if err != nil {
		return ChatMessage{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// ChatService_sendMessage_Params_List is a list of ChatService_sendMessage_Params.
type ChatService_sendMessage_Params_List = capnp.StructList[ChatService_sendMessage_Params]

// NewChatService_sendMessage_Params creates a new list of ChatService_sendMessage_Params.
func NewChatService_sendMessage_Params_List(s *capnp.Segment, sz int32) (ChatService_sendMessage_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[ChatService_sendMessage_Params](l), err
}

// ChatService_sendMessage_Params_Future is a wrapper for a ChatService_sendMessage_Params promised by a client call.
type ChatService_sendMessage_Params_Future struct{ *capnp.Future }

func (f ChatService_sendMessage_Params_Future) Struct() (ChatService_sendMessage_Params, error) {
	p, err := f.Future.Ptr()
	return ChatService_sendMessage_Params(p.Struct()), err
}
func (p ChatService_sendMessage_Params_Future) Msg() ChatMessage_Future {
	return ChatMessage_Future{Future: p.Future.Field(0, nil)}
}

type ChatService_sendMessage_Results capnp.Struct

// ChatService_sendMessage_Results_TypeID is the unique identifier for the type ChatService_sendMessage_Results.
const ChatService_sendMessage_Results_TypeID = 0xc600f353a7191d3b

func NewChatService_sendMessage_Results(s *capnp.Segment) (ChatService_sendMessage_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return ChatService_sendMessage_Results(st), err
}

func NewRootChatService_sendMessage_Results(s *capnp.Segment) (ChatService_sendMessage_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return ChatService_sendMessage_Results(st), err
}

func ReadRootChatService_sendMessage_Results(msg *capnp.Message) (ChatService_sendMessage_Results, error) {
	root, err := msg.Root()
	return ChatService_sendMessage_Results(root.Struct()), err
}

func (s ChatService_sendMessage_Results) String() string {
	str, _ := text.Marshal(0xc600f353a7191d3b, capnp.Struct(s))
	return str
}

func (s ChatService_sendMessage_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ChatService_sendMessage_Results) DecodeFromPtr(p capnp.Ptr) ChatService_sendMessage_Results {
	return ChatService_sendMessage_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ChatService_sendMessage_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ChatService_sendMessage_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ChatService_sendMessage_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ChatService_sendMessage_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// ChatService_sendMessage_Results_List is a list of ChatService_sendMessage_Results.
type ChatService_sendMessage_Results_List = capnp.StructList[ChatService_sendMessage_Results]

// NewChatService_sendMessage_Results creates a new list of ChatService_sendMessage_Results.
func NewChatService_sendMessage_Results_List(s *capnp.Segment, sz int32) (ChatService_sendMessage_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[ChatService_sendMessage_Results](l), err
}

// ChatService_sendMessage_Results_Future is a wrapper for a ChatService_sendMessage_Results promised by a client call.
type ChatService_sendMessage_Results_Future struct{ *capnp.Future }

func (f ChatService_sendMessage_Results_Future) Struct() (ChatService_sendMessage_Results, error) {
	p, err := f.Future.Ptr()
	return ChatService_sendMessage_Results(p.Struct()), err
}

type ChatService_getMessages_Params capnp.Struct

// ChatService_getMessages_Params_TypeID is the unique identifier for the type ChatService_getMessages_Params.
const ChatService_getMessages_Params_TypeID = 0xf1c38a5360feb70f

func NewChatService_getMessages_Params(s *capnp.Segment) (ChatService_getMessages_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return ChatService_getMessages_Params(st), err
}

func NewRootChatService_getMessages_Params(s *capnp.Segment) (ChatService_getMessages_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return ChatService_getMessages_Params(st), err
}

func ReadRootChatService_getMessages_Params(msg *capnp.Message) (ChatService_getMessages_Params, error) {
	root, err := msg.Root()
	return ChatService_getMessages_Params(root.Struct()), err
}

func (s ChatService_getMessages_Params) String() string {
	str, _ := text.Marshal(0xf1c38a5360feb70f, capnp.Struct(s))
	return str
}

func (s ChatService_getMessages_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ChatService_getMessages_Params) DecodeFromPtr(p capnp.Ptr) ChatService_getMessages_Params {
	return ChatService_getMessages_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ChatService_getMessages_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ChatService_getMessages_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ChatService_getMessages_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ChatService_getMessages_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ChatService_getMessages_Params) LastMessageId() uint64 {
	return capnp.Struct(s).Uint64(0)
}

func (s ChatService_getMessages_Params) SetLastMessageId(v uint64) {
	capnp.Struct(s).SetUint64(0, v)
}

// ChatService_getMessages_Params_List is a list of ChatService_getMessages_Params.
type ChatService_getMessages_Params_List = capnp.StructList[ChatService_getMessages_Params]

// NewChatService_getMessages_Params creates a new list of ChatService_getMessages_Params.
func NewChatService_getMessages_Params_List(s *capnp.Segment, sz int32) (ChatService_getMessages_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[ChatService_getMessages_Params](l), err
}

// ChatService_getMessages_Params_Future is a wrapper for a ChatService_getMessages_Params promised by a client call.
type ChatService_getMessages_Params_Future struct{ *capnp.Future }

func (f ChatService_getMessages_Params_Future) Struct() (ChatService_getMessages_Params, error) {
	p, err := f.Future.Ptr()
	return ChatService_getMessages_Params(p.Struct()), err
}

type ChatService_getMessages_Results capnp.Struct

// ChatService_getMessages_Results_TypeID is the unique identifier for the type ChatService_getMessages_Results.
const ChatService_getMessages_Results_TypeID = 0x96c84cdae1ff5e50

func NewChatService_getMessages_Results(s *capnp.Segment) (ChatService_getMessages_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ChatService_getMessages_Results(st), err
}

func NewRootChatService_getMessages_Results(s *capnp.Segment) (ChatService_getMessages_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ChatService_getMessages_Results(st), err
}

func ReadRootChatService_getMessages_Results(msg *capnp.Message) (ChatService_getMessages_Results, error) {
	root, err := msg.Root()
	return ChatService_getMessages_Results(root.Struct()), err
}

func (s ChatService_getMessages_Results) String() string {
	str, _ := text.Marshal(0x96c84cdae1ff5e50, capnp.Struct(s))
	return str
}

func (s ChatService_getMessages_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ChatService_getMessages_Results) DecodeFromPtr(p capnp.Ptr) ChatService_getMessages_Results {
	return ChatService_getMessages_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ChatService_getMessages_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ChatService_getMessages_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ChatService_getMessages_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ChatService_getMessages_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ChatService_getMessages_Results) Messages() (ChatMessage_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return ChatMessage_List(p.List()), err
}

func (s ChatService_getMessages_Results) HasMessages() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ChatService_getMessages_Results) SetMessages(v ChatMessage_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewMessages sets the messages field to a newly
// allocated ChatMessage_List, preferring placement in s's segment.
func (s ChatService_getMessages_Results) NewMessages(n int32) (ChatMessage_List, error) {
	l, err := NewChatMessage_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return ChatMessage_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// ChatService_getMessages_Results_List is a list of ChatService_getMessages_Results.
type ChatService_getMessages_Results_List = capnp.StructList[ChatService_getMessages_Results]

// NewChatService_getMessages_Results creates a new list of ChatService_getMessages_Results.
func NewChatService_getMessages_Results_List(s *capnp.Segment, sz int32) (ChatService_getMessages_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[ChatService_getMessages_Results](l), err
}

// ChatService_getMessages_Results_Future is a wrapper for a ChatService_getMessages_Results promised by a client call.
type ChatService_getMessages_Results_Future struct{ *capnp.Future }

func (f ChatService_getMessages_Results_Future) Struct() (ChatService_getMessages_Results, error) {
	p, err := f.Future.Ptr()
	return ChatService_getMessages_Results(p.Struct()), err
}

const schema_b068ff5fb1c4f77e = "x\xda\x94\x91\xbfkTO\x14\xc5\xcf\x99\xd9\xf7}\x09" +
	"\xe4\xd7\xf06\xf0\x8d\xb2\x08\x1a!)\x8c\x06\xb10\x16" +
	"\x09\x8a\x85bd'\x01A\x10u\xb2;\xbc\x0d\xe4\xad" +
	"\xeb\xce\xf3G\xa1\x06b!\xa4\x12\x0b{\x0b\x11\x0b!" +
	"ba)\xa8\x04\xff\x05\xed\x84\x80\x98ND\xec\x1c\x99" +
	"5\xbb\xf9\x81 \xe9\xe6r\xcf\x9cs\xef\xe7\x1e\x19\xe6" +
	"Ta\xbc\xf7\x96\x84\xd0#\xd1\x7f\xbezw\xed\xe9\xe9" +
	"\xfb\x8bKPJ\xfa{?\xdf\xbf\xbc\xe2k+\x00\x93" +
	"'\\O^0\x06\x92\xe7|\x90P\xc4\x80\x9f{\xb5" +
	"b\xee\x1c\x18z\x08U\"\x10\x85\xee\xd1\xaf\\\"\x98" +
	"\xfc\xe0$\xe8\xcb\x97\xfd\xe7O\xe7><\xde*\x18\x14" +
	"\xcbApP\x04\xc1\x85\xbd\x8f\xd6>\xd6\xcf\xbf\x85V" +
	"\x14\x9byQ\xb0O.\x8a\xf5\xc4\xb6^F|\x01\xdf" +
	"\x9c(\x0d=\x9b\xfd\xbe\xda\xf2*\x04\xab\xe3r\x99(" +
	"\xf8\xfe\xd7\xbf\xae\xce.\xbf\xfb\x06]b\xbb5*[" +
	"c\x1c\x93\x938\xe4+\xa6Qo\x1c\xae\xd4\x84\xc9\xc7" +
	"Z\xef\x89S5\x93\xcf\xdaf\xff\xcd\xf9\x8a-\x93\xba" +
	"KF[\xf6\xe1\x9f$\xac\xaa\xf19\x085\x1a\x93\x9d" +
	"\x10\xb6wR\xa5\xd0\x1b\x8c\xbd\xb3\xf5\xea\xb4u\x0e\xb1" +
	"I\xed\x14}j\xf3P\x1a\xc4\xa9uS,\x93\x9d\x01" +
	"\xa2\x9d\x03\x84\xfc\xb1\xb6\x81I\xedp\xd94M\xe6\xa0" +
	"\x0b\xb2\x00\x14\x08\xa8\xde\xfd\x80\xee\x92\xd4E\xc18s" +
	")\x076\xa9\x81\x1c\xc0\xbf\xec\xdb\xf3\xa4\xd6\x0d\xcfX" +
	"wc!w\xd8\x16p\x16\xd0=\x92zD\xd0g\x1b" +
	"J\x00\xec\x03\xcb\x92;\xf2\xfa\xb6\xe4m\xe79m]" +
	"\x7f\xf8\x1bx\x0et\xdc\xcd\x1e@_\x92\xd45AE" +
	"\x16\xc3\x85\x94\x9d\x01tUR7\x04)\x8a\x14\x80\xca" +
	"&\x00]\x93\xd4\xb9\xa0\x92,R\x02\xea\xfaI@/" +
	"H\xea\xdb\x82r\xbe\xcan\x08v\x83>\x9f\xcf\xac\xcb" +
	"M\x066\x18A0\x02'\x03F\xdbd\x0f\x04{\xc0" +
	"\xc5\xca\xb5zn\xeby\xbb\xde\xc5\x0d:\x90v\x01\xf6" +
	"/wkn`\xfd_\xd0/\x18\xd7\xd2b\x9fI\xed" +
	"\x99\xce\x1e\xbf\x03\x00\x00\xff\xff\xa9\xce\xf3A"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_b068ff5fb1c4f77e,
		Nodes: []uint64{
			0x827f8345a5e47d64,
			0x9019237c61b0b362,
			0x96c84cdae1ff5e50,
			0xc24e6ed9e4921b56,
			0xc600f353a7191d3b,
			0xf1c38a5360feb70f,
		},
		Compressed: true,
	})
}
