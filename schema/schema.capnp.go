// Code generated by capnpc-go. DO NOT EDIT.

package schema

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	fc "capnproto.org/go/capnp/v3/flowcontrol"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
)

type UserId capnp.Struct

// UserId_TypeID is the unique identifier for the type UserId.
const UserId_TypeID = 0xb5386904bd8e5e19

func NewUserId(s *capnp.Segment) (UserId, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return UserId(st), err
}

func NewRootUserId(s *capnp.Segment) (UserId, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return UserId(st), err
}

func ReadRootUserId(msg *capnp.Message) (UserId, error) {
	root, err := msg.Root()
	return UserId(root.Struct()), err
}

func (s UserId) String() string {
	str, _ := text.Marshal(0xb5386904bd8e5e19, capnp.Struct(s))
	return str
}

func (s UserId) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (UserId) DecodeFromPtr(p capnp.Ptr) UserId {
	return UserId(capnp.Struct{}.DecodeFromPtr(p))
}

func (s UserId) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s UserId) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s UserId) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s UserId) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s UserId) Id() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s UserId) HasId() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s UserId) SetId(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

// UserId_List is a list of UserId.
type UserId_List = capnp.StructList[UserId]

// NewUserId creates a new list of UserId.
func NewUserId_List(s *capnp.Segment, sz int32) (UserId_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[UserId](l), err
}

// UserId_Future is a wrapper for a UserId promised by a client call.
type UserId_Future struct{ *capnp.Future }

func (f UserId_Future) Struct() (UserId, error) {
	p, err := f.Future.Ptr()
	return UserId(p.Struct()), err
}

type ChatMessage capnp.Struct

// ChatMessage_TypeID is the unique identifier for the type ChatMessage.
const ChatMessage_TypeID = 0xc24e6ed9e4921b56

func NewChatMessage(s *capnp.Segment) (ChatMessage, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2})
	return ChatMessage(st), err
}

func NewRootChatMessage(s *capnp.Segment) (ChatMessage, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2})
	return ChatMessage(st), err
}

func ReadRootChatMessage(msg *capnp.Message) (ChatMessage, error) {
	root, err := msg.Root()
	return ChatMessage(root.Struct()), err
}

func (s ChatMessage) String() string {
	str, _ := text.Marshal(0xc24e6ed9e4921b56, capnp.Struct(s))
	return str
}

func (s ChatMessage) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ChatMessage) DecodeFromPtr(p capnp.Ptr) ChatMessage {
	return ChatMessage(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ChatMessage) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ChatMessage) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ChatMessage) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ChatMessage) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ChatMessage) Id() uint64 {
	return capnp.Struct(s).Uint64(0)
}

func (s ChatMessage) SetId(v uint64) {
	capnp.Struct(s).SetUint64(0, v)
}

func (s ChatMessage) Timestamp() int64 {
	return int64(capnp.Struct(s).Uint64(8))
}

func (s ChatMessage) SetTimestamp(v int64) {
	capnp.Struct(s).SetUint64(8, uint64(v))
}

func (s ChatMessage) Sender() (UserId, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return UserId(p.Struct()), err
}

func (s ChatMessage) HasSender() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ChatMessage) SetSender(v UserId) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewSender sets the sender field to a newly
// allocated UserId struct, preferring placement in s's segment.
func (s ChatMessage) NewSender() (UserId, error) {
	ss, err := NewUserId(capnp.Struct(s).Segment())
	if err != nil {
		return UserId{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s ChatMessage) Content() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s ChatMessage) HasContent() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s ChatMessage) ContentBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s ChatMessage) SetContent(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

// ChatMessage_List is a list of ChatMessage.
type ChatMessage_List = capnp.StructList[ChatMessage]

// NewChatMessage creates a new list of ChatMessage.
func NewChatMessage_List(s *capnp.Segment, sz int32) (ChatMessage_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2}, sz)
	return capnp.StructList[ChatMessage](l), err
}

// ChatMessage_Future is a wrapper for a ChatMessage promised by a client call.
type ChatMessage_Future struct{ *capnp.Future }

func (f ChatMessage_Future) Struct() (ChatMessage, error) {
	p, err := f.Future.Ptr()
	return ChatMessage(p.Struct()), err
}
func (p ChatMessage_Future) Sender() UserId_Future {
	return UserId_Future{Future: p.Future.Field(0, nil)}
}

type ChatRoom capnp.Struct

// ChatRoom_TypeID is the unique identifier for the type ChatRoom.
const ChatRoom_TypeID = 0xa7d38fc14e6f8d9a

func NewChatRoom(s *capnp.Segment) (ChatRoom, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return ChatRoom(st), err
}

func NewRootChatRoom(s *capnp.Segment) (ChatRoom, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return ChatRoom(st), err
}

func ReadRootChatRoom(msg *capnp.Message) (ChatRoom, error) {
	root, err := msg.Root()
	return ChatRoom(root.Struct()), err
}

func (s ChatRoom) String() string {
	str, _ := text.Marshal(0xa7d38fc14e6f8d9a, capnp.Struct(s))
	return str
}

func (s ChatRoom) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ChatRoom) DecodeFromPtr(p capnp.Ptr) ChatRoom {
	return ChatRoom(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ChatRoom) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ChatRoom) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ChatRoom) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ChatRoom) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ChatRoom) Id() uint64 {
	return capnp.Struct(s).Uint64(0)
}

func (s ChatRoom) SetId(v uint64) {
	capnp.Struct(s).SetUint64(0, v)
}

func (s ChatRoom) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s ChatRoom) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ChatRoom) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s ChatRoom) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s ChatRoom) Participants() (UserId_List, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return UserId_List(p.List()), err
}

func (s ChatRoom) HasParticipants() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s ChatRoom) SetParticipants(v UserId_List) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewParticipants sets the participants field to a newly
// allocated UserId_List, preferring placement in s's segment.
func (s ChatRoom) NewParticipants(n int32) (UserId_List, error) {
	l, err := NewUserId_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return UserId_List{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}
func (s ChatRoom) Messages() (ChatMessage_List, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return ChatMessage_List(p.List()), err
}

func (s ChatRoom) HasMessages() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s ChatRoom) SetMessages(v ChatMessage_List) error {
	return capnp.Struct(s).SetPtr(2, v.ToPtr())
}

// NewMessages sets the messages field to a newly
// allocated ChatMessage_List, preferring placement in s's segment.
func (s ChatRoom) NewMessages(n int32) (ChatMessage_List, error) {
	l, err := NewChatMessage_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return ChatMessage_List{}, err
	}
	err = capnp.Struct(s).SetPtr(2, l.ToPtr())
	return l, err
}

// ChatRoom_List is a list of ChatRoom.
type ChatRoom_List = capnp.StructList[ChatRoom]

// NewChatRoom creates a new list of ChatRoom.
func NewChatRoom_List(s *capnp.Segment, sz int32) (ChatRoom_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3}, sz)
	return capnp.StructList[ChatRoom](l), err
}

// ChatRoom_Future is a wrapper for a ChatRoom promised by a client call.
type ChatRoom_Future struct{ *capnp.Future }

func (f ChatRoom_Future) Struct() (ChatRoom, error) {
	p, err := f.Future.Ptr()
	return ChatRoom(p.Struct()), err
}

type LocalChatHistory capnp.Struct

// LocalChatHistory_TypeID is the unique identifier for the type LocalChatHistory.
const LocalChatHistory_TypeID = 0xefa35553c9f3a23d

func NewLocalChatHistory(s *capnp.Segment) (LocalChatHistory, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return LocalChatHistory(st), err
}

func NewRootLocalChatHistory(s *capnp.Segment) (LocalChatHistory, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return LocalChatHistory(st), err
}

func ReadRootLocalChatHistory(msg *capnp.Message) (LocalChatHistory, error) {
	root, err := msg.Root()
	return LocalChatHistory(root.Struct()), err
}

func (s LocalChatHistory) String() string {
	str, _ := text.Marshal(0xefa35553c9f3a23d, capnp.Struct(s))
	return str
}

func (s LocalChatHistory) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (LocalChatHistory) DecodeFromPtr(p capnp.Ptr) LocalChatHistory {
	return LocalChatHistory(capnp.Struct{}.DecodeFromPtr(p))
}

func (s LocalChatHistory) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s LocalChatHistory) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s LocalChatHistory) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s LocalChatHistory) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s LocalChatHistory) Rooms() (ChatRoom_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return ChatRoom_List(p.List()), err
}

func (s LocalChatHistory) HasRooms() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s LocalChatHistory) SetRooms(v ChatRoom_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewRooms sets the rooms field to a newly
// allocated ChatRoom_List, preferring placement in s's segment.
func (s LocalChatHistory) NewRooms(n int32) (ChatRoom_List, error) {
	l, err := NewChatRoom_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return ChatRoom_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// LocalChatHistory_List is a list of LocalChatHistory.
type LocalChatHistory_List = capnp.StructList[LocalChatHistory]

// NewLocalChatHistory creates a new list of LocalChatHistory.
func NewLocalChatHistory_List(s *capnp.Segment, sz int32) (LocalChatHistory_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[LocalChatHistory](l), err
}

// LocalChatHistory_Future is a wrapper for a LocalChatHistory promised by a client call.
type LocalChatHistory_Future struct{ *capnp.Future }

func (f LocalChatHistory_Future) Struct() (LocalChatHistory, error) {
	p, err := f.Future.Ptr()
	return LocalChatHistory(p.Struct()), err
}

type PeerDiscoveryService capnp.Client

// PeerDiscoveryService_TypeID is the unique identifier for the type PeerDiscoveryService.
const PeerDiscoveryService_TypeID = 0xe4b3813c094c1b12

func (c PeerDiscoveryService) DiscoverPeers(ctx context.Context, params func(PeerDiscoveryService_discoverPeers_Params) error) (PeerDiscoveryService_discoverPeers_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xe4b3813c094c1b12,
			MethodID:      0,
			InterfaceName: "schema/schema.capnp:PeerDiscoveryService",
			MethodName:    "discoverPeers",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(PeerDiscoveryService_discoverPeers_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return PeerDiscoveryService_discoverPeers_Results_Future{Future: ans.Future()}, release

}

func (c PeerDiscoveryService) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c PeerDiscoveryService) String() string {
	return "PeerDiscoveryService(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c PeerDiscoveryService) AddRef() PeerDiscoveryService {
	return PeerDiscoveryService(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c PeerDiscoveryService) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c PeerDiscoveryService) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c PeerDiscoveryService) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (PeerDiscoveryService) DecodeFromPtr(p capnp.Ptr) PeerDiscoveryService {
	return PeerDiscoveryService(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c PeerDiscoveryService) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c PeerDiscoveryService) IsSame(other PeerDiscoveryService) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c PeerDiscoveryService) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c PeerDiscoveryService) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A PeerDiscoveryService_Server is a PeerDiscoveryService with a local implementation.
type PeerDiscoveryService_Server interface {
	DiscoverPeers(context.Context, PeerDiscoveryService_discoverPeers) error
}

// PeerDiscoveryService_NewServer creates a new Server from an implementation of PeerDiscoveryService_Server.
func PeerDiscoveryService_NewServer(s PeerDiscoveryService_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(PeerDiscoveryService_Methods(nil, s), s, c)
}

// PeerDiscoveryService_ServerToClient creates a new Client from an implementation of PeerDiscoveryService_Server.
// The caller is responsible for calling Release on the returned Client.
func PeerDiscoveryService_ServerToClient(s PeerDiscoveryService_Server) PeerDiscoveryService {
	return PeerDiscoveryService(capnp.NewClient(PeerDiscoveryService_NewServer(s)))
}

// PeerDiscoveryService_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func PeerDiscoveryService_Methods(methods []server.Method, s PeerDiscoveryService_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe4b3813c094c1b12,
			MethodID:      0,
			InterfaceName: "schema/schema.capnp:PeerDiscoveryService",
			MethodName:    "discoverPeers",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.DiscoverPeers(ctx, PeerDiscoveryService_discoverPeers{call})
		},
	})

	return methods
}

// PeerDiscoveryService_discoverPeers holds the state for a server call to PeerDiscoveryService.discoverPeers.
// See server.Call for documentation.
type PeerDiscoveryService_discoverPeers struct {
	*server.Call
}

// Args returns the call's arguments.
func (c PeerDiscoveryService_discoverPeers) Args() PeerDiscoveryService_discoverPeers_Params {
	return PeerDiscoveryService_discoverPeers_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c PeerDiscoveryService_discoverPeers) AllocResults() (PeerDiscoveryService_discoverPeers_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return PeerDiscoveryService_discoverPeers_Results(r), err
}

// PeerDiscoveryService_List is a list of PeerDiscoveryService.
type PeerDiscoveryService_List = capnp.CapList[PeerDiscoveryService]

// NewPeerDiscoveryService creates a new list of PeerDiscoveryService.
func NewPeerDiscoveryService_List(s *capnp.Segment, sz int32) (PeerDiscoveryService_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[PeerDiscoveryService](l), err
}

type PeerDiscoveryService_discoverPeers_Params capnp.Struct

// PeerDiscoveryService_discoverPeers_Params_TypeID is the unique identifier for the type PeerDiscoveryService_discoverPeers_Params.
const PeerDiscoveryService_discoverPeers_Params_TypeID = 0x9db513ec00505aee

func NewPeerDiscoveryService_discoverPeers_Params(s *capnp.Segment) (PeerDiscoveryService_discoverPeers_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return PeerDiscoveryService_discoverPeers_Params(st), err
}

func NewRootPeerDiscoveryService_discoverPeers_Params(s *capnp.Segment) (PeerDiscoveryService_discoverPeers_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return PeerDiscoveryService_discoverPeers_Params(st), err
}

func ReadRootPeerDiscoveryService_discoverPeers_Params(msg *capnp.Message) (PeerDiscoveryService_discoverPeers_Params, error) {
	root, err := msg.Root()
	return PeerDiscoveryService_discoverPeers_Params(root.Struct()), err
}

func (s PeerDiscoveryService_discoverPeers_Params) String() string {
	str, _ := text.Marshal(0x9db513ec00505aee, capnp.Struct(s))
	return str
}

func (s PeerDiscoveryService_discoverPeers_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (PeerDiscoveryService_discoverPeers_Params) DecodeFromPtr(p capnp.Ptr) PeerDiscoveryService_discoverPeers_Params {
	return PeerDiscoveryService_discoverPeers_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s PeerDiscoveryService_discoverPeers_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s PeerDiscoveryService_discoverPeers_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s PeerDiscoveryService_discoverPeers_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s PeerDiscoveryService_discoverPeers_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// PeerDiscoveryService_discoverPeers_Params_List is a list of PeerDiscoveryService_discoverPeers_Params.
type PeerDiscoveryService_discoverPeers_Params_List = capnp.StructList[PeerDiscoveryService_discoverPeers_Params]

// NewPeerDiscoveryService_discoverPeers_Params creates a new list of PeerDiscoveryService_discoverPeers_Params.
func NewPeerDiscoveryService_discoverPeers_Params_List(s *capnp.Segment, sz int32) (PeerDiscoveryService_discoverPeers_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[PeerDiscoveryService_discoverPeers_Params](l), err
}

// PeerDiscoveryService_discoverPeers_Params_Future is a wrapper for a PeerDiscoveryService_discoverPeers_Params promised by a client call.
type PeerDiscoveryService_discoverPeers_Params_Future struct{ *capnp.Future }

func (f PeerDiscoveryService_discoverPeers_Params_Future) Struct() (PeerDiscoveryService_discoverPeers_Params, error) {
	p, err := f.Future.Ptr()
	return PeerDiscoveryService_discoverPeers_Params(p.Struct()), err
}

type PeerDiscoveryService_discoverPeers_Results capnp.Struct

// PeerDiscoveryService_discoverPeers_Results_TypeID is the unique identifier for the type PeerDiscoveryService_discoverPeers_Results.
const PeerDiscoveryService_discoverPeers_Results_TypeID = 0x967b7592dd4c3bf6

func NewPeerDiscoveryService_discoverPeers_Results(s *capnp.Segment) (PeerDiscoveryService_discoverPeers_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return PeerDiscoveryService_discoverPeers_Results(st), err
}

func NewRootPeerDiscoveryService_discoverPeers_Results(s *capnp.Segment) (PeerDiscoveryService_discoverPeers_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return PeerDiscoveryService_discoverPeers_Results(st), err
}

func ReadRootPeerDiscoveryService_discoverPeers_Results(msg *capnp.Message) (PeerDiscoveryService_discoverPeers_Results, error) {
	root, err := msg.Root()
	return PeerDiscoveryService_discoverPeers_Results(root.Struct()), err
}

func (s PeerDiscoveryService_discoverPeers_Results) String() string {
	str, _ := text.Marshal(0x967b7592dd4c3bf6, capnp.Struct(s))
	return str
}

func (s PeerDiscoveryService_discoverPeers_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (PeerDiscoveryService_discoverPeers_Results) DecodeFromPtr(p capnp.Ptr) PeerDiscoveryService_discoverPeers_Results {
	return PeerDiscoveryService_discoverPeers_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s PeerDiscoveryService_discoverPeers_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s PeerDiscoveryService_discoverPeers_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s PeerDiscoveryService_discoverPeers_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s PeerDiscoveryService_discoverPeers_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s PeerDiscoveryService_discoverPeers_Results) PeerIds() (UserId_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return UserId_List(p.List()), err
}

func (s PeerDiscoveryService_discoverPeers_Results) HasPeerIds() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s PeerDiscoveryService_discoverPeers_Results) SetPeerIds(v UserId_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewPeerIds sets the peerIds field to a newly
// allocated UserId_List, preferring placement in s's segment.
func (s PeerDiscoveryService_discoverPeers_Results) NewPeerIds(n int32) (UserId_List, error) {
	l, err := NewUserId_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return UserId_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// PeerDiscoveryService_discoverPeers_Results_List is a list of PeerDiscoveryService_discoverPeers_Results.
type PeerDiscoveryService_discoverPeers_Results_List = capnp.StructList[PeerDiscoveryService_discoverPeers_Results]

// NewPeerDiscoveryService_discoverPeers_Results creates a new list of PeerDiscoveryService_discoverPeers_Results.
func NewPeerDiscoveryService_discoverPeers_Results_List(s *capnp.Segment, sz int32) (PeerDiscoveryService_discoverPeers_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[PeerDiscoveryService_discoverPeers_Results](l), err
}

// PeerDiscoveryService_discoverPeers_Results_Future is a wrapper for a PeerDiscoveryService_discoverPeers_Results promised by a client call.
type PeerDiscoveryService_discoverPeers_Results_Future struct{ *capnp.Future }

func (f PeerDiscoveryService_discoverPeers_Results_Future) Struct() (PeerDiscoveryService_discoverPeers_Results, error) {
	p, err := f.Future.Ptr()
	return PeerDiscoveryService_discoverPeers_Results(p.Struct()), err
}

type SecureMessagingService capnp.Client

// SecureMessagingService_TypeID is the unique identifier for the type SecureMessagingService.
const SecureMessagingService_TypeID = 0x9c54b75701e4930b

func (c SecureMessagingService) SendMessage(ctx context.Context, params func(SecureMessagingService_sendMessage_Params) error) (SecureMessagingService_sendMessage_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x9c54b75701e4930b,
			MethodID:      0,
			InterfaceName: "schema/schema.capnp:SecureMessagingService",
			MethodName:    "sendMessage",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(SecureMessagingService_sendMessage_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return SecureMessagingService_sendMessage_Results_Future{Future: ans.Future()}, release

}

func (c SecureMessagingService) GetMessages(ctx context.Context, params func(SecureMessagingService_getMessages_Params) error) (SecureMessagingService_getMessages_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x9c54b75701e4930b,
			MethodID:      1,
			InterfaceName: "schema/schema.capnp:SecureMessagingService",
			MethodName:    "getMessages",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 16, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(SecureMessagingService_getMessages_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return SecureMessagingService_getMessages_Results_Future{Future: ans.Future()}, release

}

func (c SecureMessagingService) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c SecureMessagingService) String() string {
	return "SecureMessagingService(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c SecureMessagingService) AddRef() SecureMessagingService {
	return SecureMessagingService(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c SecureMessagingService) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c SecureMessagingService) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c SecureMessagingService) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (SecureMessagingService) DecodeFromPtr(p capnp.Ptr) SecureMessagingService {
	return SecureMessagingService(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c SecureMessagingService) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c SecureMessagingService) IsSame(other SecureMessagingService) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c SecureMessagingService) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c SecureMessagingService) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A SecureMessagingService_Server is a SecureMessagingService with a local implementation.
type SecureMessagingService_Server interface {
	SendMessage(context.Context, SecureMessagingService_sendMessage) error

	GetMessages(context.Context, SecureMessagingService_getMessages) error
}

// SecureMessagingService_NewServer creates a new Server from an implementation of SecureMessagingService_Server.
func SecureMessagingService_NewServer(s SecureMessagingService_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(SecureMessagingService_Methods(nil, s), s, c)
}

// SecureMessagingService_ServerToClient creates a new Client from an implementation of SecureMessagingService_Server.
// The caller is responsible for calling Release on the returned Client.
func SecureMessagingService_ServerToClient(s SecureMessagingService_Server) SecureMessagingService {
	return SecureMessagingService(capnp.NewClient(SecureMessagingService_NewServer(s)))
}

// SecureMessagingService_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func SecureMessagingService_Methods(methods []server.Method, s SecureMessagingService_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x9c54b75701e4930b,
			MethodID:      0,
			InterfaceName: "schema/schema.capnp:SecureMessagingService",
			MethodName:    "sendMessage",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.SendMessage(ctx, SecureMessagingService_sendMessage{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x9c54b75701e4930b,
			MethodID:      1,
			InterfaceName: "schema/schema.capnp:SecureMessagingService",
			MethodName:    "getMessages",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.GetMessages(ctx, SecureMessagingService_getMessages{call})
		},
	})

	return methods
}

// SecureMessagingService_sendMessage holds the state for a server call to SecureMessagingService.sendMessage.
// See server.Call for documentation.
type SecureMessagingService_sendMessage struct {
	*server.Call
}

// Args returns the call's arguments.
func (c SecureMessagingService_sendMessage) Args() SecureMessagingService_sendMessage_Params {
	return SecureMessagingService_sendMessage_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c SecureMessagingService_sendMessage) AllocResults() (SecureMessagingService_sendMessage_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return SecureMessagingService_sendMessage_Results(r), err
}

// SecureMessagingService_getMessages holds the state for a server call to SecureMessagingService.getMessages.
// See server.Call for documentation.
type SecureMessagingService_getMessages struct {
	*server.Call
}

// Args returns the call's arguments.
func (c SecureMessagingService_getMessages) Args() SecureMessagingService_getMessages_Params {
	return SecureMessagingService_getMessages_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c SecureMessagingService_getMessages) AllocResults() (SecureMessagingService_getMessages_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SecureMessagingService_getMessages_Results(r), err
}

// SecureMessagingService_List is a list of SecureMessagingService.
type SecureMessagingService_List = capnp.CapList[SecureMessagingService]

// NewSecureMessagingService creates a new list of SecureMessagingService.
func NewSecureMessagingService_List(s *capnp.Segment, sz int32) (SecureMessagingService_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[SecureMessagingService](l), err
}

type SecureMessagingService_sendMessage_Params capnp.Struct

// SecureMessagingService_sendMessage_Params_TypeID is the unique identifier for the type SecureMessagingService_sendMessage_Params.
const SecureMessagingService_sendMessage_Params_TypeID = 0x8d3727ae4ca934b0

func NewSecureMessagingService_sendMessage_Params(s *capnp.Segment) (SecureMessagingService_sendMessage_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return SecureMessagingService_sendMessage_Params(st), err
}

func NewRootSecureMessagingService_sendMessage_Params(s *capnp.Segment) (SecureMessagingService_sendMessage_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return SecureMessagingService_sendMessage_Params(st), err
}

func ReadRootSecureMessagingService_sendMessage_Params(msg *capnp.Message) (SecureMessagingService_sendMessage_Params, error) {
	root, err := msg.Root()
	return SecureMessagingService_sendMessage_Params(root.Struct()), err
}

func (s SecureMessagingService_sendMessage_Params) String() string {
	str, _ := text.Marshal(0x8d3727ae4ca934b0, capnp.Struct(s))
	return str
}

func (s SecureMessagingService_sendMessage_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SecureMessagingService_sendMessage_Params) DecodeFromPtr(p capnp.Ptr) SecureMessagingService_sendMessage_Params {
	return SecureMessagingService_sendMessage_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SecureMessagingService_sendMessage_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SecureMessagingService_sendMessage_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SecureMessagingService_sendMessage_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SecureMessagingService_sendMessage_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SecureMessagingService_sendMessage_Params) RoomId() uint64 {
	return capnp.Struct(s).Uint64(0)
}

func (s SecureMessagingService_sendMessage_Params) SetRoomId(v uint64) {
	capnp.Struct(s).SetUint64(0, v)
}

func (s SecureMessagingService_sendMessage_Params) Msg() (ChatMessage, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return ChatMessage(p.Struct()), err
}

func (s SecureMessagingService_sendMessage_Params) HasMsg() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s SecureMessagingService_sendMessage_Params) SetMsg(v ChatMessage) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewMsg sets the msg field to a newly
// allocated ChatMessage struct, preferring placement in s's segment.
func (s SecureMessagingService_sendMessage_Params) NewMsg() (ChatMessage, error) {
	ss, err := NewChatMessage(capnp.Struct(s).Segment())
	if err != nil {
		return ChatMessage{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// SecureMessagingService_sendMessage_Params_List is a list of SecureMessagingService_sendMessage_Params.
type SecureMessagingService_sendMessage_Params_List = capnp.StructList[SecureMessagingService_sendMessage_Params]

// NewSecureMessagingService_sendMessage_Params creates a new list of SecureMessagingService_sendMessage_Params.
func NewSecureMessagingService_sendMessage_Params_List(s *capnp.Segment, sz int32) (SecureMessagingService_sendMessage_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[SecureMessagingService_sendMessage_Params](l), err
}

// SecureMessagingService_sendMessage_Params_Future is a wrapper for a SecureMessagingService_sendMessage_Params promised by a client call.
type SecureMessagingService_sendMessage_Params_Future struct{ *capnp.Future }

func (f SecureMessagingService_sendMessage_Params_Future) Struct() (SecureMessagingService_sendMessage_Params, error) {
	p, err := f.Future.Ptr()
	return SecureMessagingService_sendMessage_Params(p.Struct()), err
}
func (p SecureMessagingService_sendMessage_Params_Future) Msg() ChatMessage_Future {
	return ChatMessage_Future{Future: p.Future.Field(0, nil)}
}

type SecureMessagingService_sendMessage_Results capnp.Struct

// SecureMessagingService_sendMessage_Results_TypeID is the unique identifier for the type SecureMessagingService_sendMessage_Results.
const SecureMessagingService_sendMessage_Results_TypeID = 0x99c2815752425902

func NewSecureMessagingService_sendMessage_Results(s *capnp.Segment) (SecureMessagingService_sendMessage_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return SecureMessagingService_sendMessage_Results(st), err
}

func NewRootSecureMessagingService_sendMessage_Results(s *capnp.Segment) (SecureMessagingService_sendMessage_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return SecureMessagingService_sendMessage_Results(st), err
}

func ReadRootSecureMessagingService_sendMessage_Results(msg *capnp.Message) (SecureMessagingService_sendMessage_Results, error) {
	root, err := msg.Root()
	return SecureMessagingService_sendMessage_Results(root.Struct()), err
}

func (s SecureMessagingService_sendMessage_Results) String() string {
	str, _ := text.Marshal(0x99c2815752425902, capnp.Struct(s))
	return str
}

func (s SecureMessagingService_sendMessage_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SecureMessagingService_sendMessage_Results) DecodeFromPtr(p capnp.Ptr) SecureMessagingService_sendMessage_Results {
	return SecureMessagingService_sendMessage_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SecureMessagingService_sendMessage_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SecureMessagingService_sendMessage_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SecureMessagingService_sendMessage_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SecureMessagingService_sendMessage_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// SecureMessagingService_sendMessage_Results_List is a list of SecureMessagingService_sendMessage_Results.
type SecureMessagingService_sendMessage_Results_List = capnp.StructList[SecureMessagingService_sendMessage_Results]

// NewSecureMessagingService_sendMessage_Results creates a new list of SecureMessagingService_sendMessage_Results.
func NewSecureMessagingService_sendMessage_Results_List(s *capnp.Segment, sz int32) (SecureMessagingService_sendMessage_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[SecureMessagingService_sendMessage_Results](l), err
}

// SecureMessagingService_sendMessage_Results_Future is a wrapper for a SecureMessagingService_sendMessage_Results promised by a client call.
type SecureMessagingService_sendMessage_Results_Future struct{ *capnp.Future }

func (f SecureMessagingService_sendMessage_Results_Future) Struct() (SecureMessagingService_sendMessage_Results, error) {
	p, err := f.Future.Ptr()
	return SecureMessagingService_sendMessage_Results(p.Struct()), err
}

type SecureMessagingService_getMessages_Params capnp.Struct

// SecureMessagingService_getMessages_Params_TypeID is the unique identifier for the type SecureMessagingService_getMessages_Params.
const SecureMessagingService_getMessages_Params_TypeID = 0xafd9ab46b6321e7d

func NewSecureMessagingService_getMessages_Params(s *capnp.Segment) (SecureMessagingService_getMessages_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return SecureMessagingService_getMessages_Params(st), err
}

func NewRootSecureMessagingService_getMessages_Params(s *capnp.Segment) (SecureMessagingService_getMessages_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return SecureMessagingService_getMessages_Params(st), err
}

func ReadRootSecureMessagingService_getMessages_Params(msg *capnp.Message) (SecureMessagingService_getMessages_Params, error) {
	root, err := msg.Root()
	return SecureMessagingService_getMessages_Params(root.Struct()), err
}

func (s SecureMessagingService_getMessages_Params) String() string {
	str, _ := text.Marshal(0xafd9ab46b6321e7d, capnp.Struct(s))
	return str
}

func (s SecureMessagingService_getMessages_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SecureMessagingService_getMessages_Params) DecodeFromPtr(p capnp.Ptr) SecureMessagingService_getMessages_Params {
	return SecureMessagingService_getMessages_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SecureMessagingService_getMessages_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SecureMessagingService_getMessages_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SecureMessagingService_getMessages_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SecureMessagingService_getMessages_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SecureMessagingService_getMessages_Params) RoomId() uint64 {
	return capnp.Struct(s).Uint64(0)
}

func (s SecureMessagingService_getMessages_Params) SetRoomId(v uint64) {
	capnp.Struct(s).SetUint64(0, v)
}

func (s SecureMessagingService_getMessages_Params) LastMessageId() uint64 {
	return capnp.Struct(s).Uint64(8)
}

func (s SecureMessagingService_getMessages_Params) SetLastMessageId(v uint64) {
	capnp.Struct(s).SetUint64(8, v)
}

// SecureMessagingService_getMessages_Params_List is a list of SecureMessagingService_getMessages_Params.
type SecureMessagingService_getMessages_Params_List = capnp.StructList[SecureMessagingService_getMessages_Params]

// NewSecureMessagingService_getMessages_Params creates a new list of SecureMessagingService_getMessages_Params.
func NewSecureMessagingService_getMessages_Params_List(s *capnp.Segment, sz int32) (SecureMessagingService_getMessages_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return capnp.StructList[SecureMessagingService_getMessages_Params](l), err
}

// SecureMessagingService_getMessages_Params_Future is a wrapper for a SecureMessagingService_getMessages_Params promised by a client call.
type SecureMessagingService_getMessages_Params_Future struct{ *capnp.Future }

func (f SecureMessagingService_getMessages_Params_Future) Struct() (SecureMessagingService_getMessages_Params, error) {
	p, err := f.Future.Ptr()
	return SecureMessagingService_getMessages_Params(p.Struct()), err
}

type SecureMessagingService_getMessages_Results capnp.Struct

// SecureMessagingService_getMessages_Results_TypeID is the unique identifier for the type SecureMessagingService_getMessages_Results.
const SecureMessagingService_getMessages_Results_TypeID = 0xf619ce5900286163

func NewSecureMessagingService_getMessages_Results(s *capnp.Segment) (SecureMessagingService_getMessages_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SecureMessagingService_getMessages_Results(st), err
}

func NewRootSecureMessagingService_getMessages_Results(s *capnp.Segment) (SecureMessagingService_getMessages_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SecureMessagingService_getMessages_Results(st), err
}

func ReadRootSecureMessagingService_getMessages_Results(msg *capnp.Message) (SecureMessagingService_getMessages_Results, error) {
	root, err := msg.Root()
	return SecureMessagingService_getMessages_Results(root.Struct()), err
}

func (s SecureMessagingService_getMessages_Results) String() string {
	str, _ := text.Marshal(0xf619ce5900286163, capnp.Struct(s))
	return str
}

func (s SecureMessagingService_getMessages_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SecureMessagingService_getMessages_Results) DecodeFromPtr(p capnp.Ptr) SecureMessagingService_getMessages_Results {
	return SecureMessagingService_getMessages_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SecureMessagingService_getMessages_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SecureMessagingService_getMessages_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SecureMessagingService_getMessages_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SecureMessagingService_getMessages_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SecureMessagingService_getMessages_Results) Messages() (ChatMessage_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return ChatMessage_List(p.List()), err
}

func (s SecureMessagingService_getMessages_Results) HasMessages() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s SecureMessagingService_getMessages_Results) SetMessages(v ChatMessage_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewMessages sets the messages field to a newly
// allocated ChatMessage_List, preferring placement in s's segment.
func (s SecureMessagingService_getMessages_Results) NewMessages(n int32) (ChatMessage_List, error) {
	l, err := NewChatMessage_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return ChatMessage_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// SecureMessagingService_getMessages_Results_List is a list of SecureMessagingService_getMessages_Results.
type SecureMessagingService_getMessages_Results_List = capnp.StructList[SecureMessagingService_getMessages_Results]

// NewSecureMessagingService_getMessages_Results creates a new list of SecureMessagingService_getMessages_Results.
func NewSecureMessagingService_getMessages_Results_List(s *capnp.Segment, sz int32) (SecureMessagingService_getMessages_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[SecureMessagingService_getMessages_Results](l), err
}

// SecureMessagingService_getMessages_Results_Future is a wrapper for a SecureMessagingService_getMessages_Results promised by a client call.
type SecureMessagingService_getMessages_Results_Future struct{ *capnp.Future }

func (f SecureMessagingService_getMessages_Results_Future) Struct() (SecureMessagingService_getMessages_Results, error) {
	p, err := f.Future.Ptr()
	return SecureMessagingService_getMessages_Results(p.Struct()), err
}

type ChatRoomService capnp.Client

// ChatRoomService_TypeID is the unique identifier for the type ChatRoomService.
const ChatRoomService_TypeID = 0xa2a4332d03eb1545

func (c ChatRoomService) CreateRoom(ctx context.Context, params func(ChatRoomService_createRoom_Params) error) (ChatRoomService_createRoom_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa2a4332d03eb1545,
			MethodID:      0,
			InterfaceName: "schema/schema.capnp:ChatRoomService",
			MethodName:    "createRoom",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error { return params(ChatRoomService_createRoom_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return ChatRoomService_createRoom_Results_Future{Future: ans.Future()}, release

}

func (c ChatRoomService) JoinRoom(ctx context.Context, params func(ChatRoomService_joinRoom_Params) error) (ChatRoomService_joinRoom_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa2a4332d03eb1545,
			MethodID:      1,
			InterfaceName: "schema/schema.capnp:ChatRoomService",
			MethodName:    "joinRoom",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(ChatRoomService_joinRoom_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return ChatRoomService_joinRoom_Results_Future{Future: ans.Future()}, release

}

func (c ChatRoomService) LeaveRoom(ctx context.Context, params func(ChatRoomService_leaveRoom_Params) error) (ChatRoomService_leaveRoom_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa2a4332d03eb1545,
			MethodID:      2,
			InterfaceName: "schema/schema.capnp:ChatRoomService",
			MethodName:    "leaveRoom",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(ChatRoomService_leaveRoom_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return ChatRoomService_leaveRoom_Results_Future{Future: ans.Future()}, release

}

func (c ChatRoomService) GetParticipants(ctx context.Context, params func(ChatRoomService_getParticipants_Params) error) (ChatRoomService_getParticipants_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa2a4332d03eb1545,
			MethodID:      3,
			InterfaceName: "schema/schema.capnp:ChatRoomService",
			MethodName:    "getParticipants",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(ChatRoomService_getParticipants_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return ChatRoomService_getParticipants_Results_Future{Future: ans.Future()}, release

}

func (c ChatRoomService) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c ChatRoomService) String() string {
	return "ChatRoomService(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c ChatRoomService) AddRef() ChatRoomService {
	return ChatRoomService(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c ChatRoomService) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c ChatRoomService) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c ChatRoomService) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (ChatRoomService) DecodeFromPtr(p capnp.Ptr) ChatRoomService {
	return ChatRoomService(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c ChatRoomService) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c ChatRoomService) IsSame(other ChatRoomService) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c ChatRoomService) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c ChatRoomService) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A ChatRoomService_Server is a ChatRoomService with a local implementation.
type ChatRoomService_Server interface {
	CreateRoom(context.Context, ChatRoomService_createRoom) error

	JoinRoom(context.Context, ChatRoomService_joinRoom) error

	LeaveRoom(context.Context, ChatRoomService_leaveRoom) error

	GetParticipants(context.Context, ChatRoomService_getParticipants) error
}

// ChatRoomService_NewServer creates a new Server from an implementation of ChatRoomService_Server.
func ChatRoomService_NewServer(s ChatRoomService_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(ChatRoomService_Methods(nil, s), s, c)
}

// ChatRoomService_ServerToClient creates a new Client from an implementation of ChatRoomService_Server.
// The caller is responsible for calling Release on the returned Client.
func ChatRoomService_ServerToClient(s ChatRoomService_Server) ChatRoomService {
	return ChatRoomService(capnp.NewClient(ChatRoomService_NewServer(s)))
}

// ChatRoomService_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func ChatRoomService_Methods(methods []server.Method, s ChatRoomService_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 4)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa2a4332d03eb1545,
			MethodID:      0,
			InterfaceName: "schema/schema.capnp:ChatRoomService",
			MethodName:    "createRoom",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.CreateRoom(ctx, ChatRoomService_createRoom{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa2a4332d03eb1545,
			MethodID:      1,
			InterfaceName: "schema/schema.capnp:ChatRoomService",
			MethodName:    "joinRoom",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.JoinRoom(ctx, ChatRoomService_joinRoom{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa2a4332d03eb1545,
			MethodID:      2,
			InterfaceName: "schema/schema.capnp:ChatRoomService",
			MethodName:    "leaveRoom",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.LeaveRoom(ctx, ChatRoomService_leaveRoom{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa2a4332d03eb1545,
			MethodID:      3,
			InterfaceName: "schema/schema.capnp:ChatRoomService",
			MethodName:    "getParticipants",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.GetParticipants(ctx, ChatRoomService_getParticipants{call})
		},
	})

	return methods
}

// ChatRoomService_createRoom holds the state for a server call to ChatRoomService.createRoom.
// See server.Call for documentation.
type ChatRoomService_createRoom struct {
	*server.Call
}

// Args returns the call's arguments.
func (c ChatRoomService_createRoom) Args() ChatRoomService_createRoom_Params {
	return ChatRoomService_createRoom_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c ChatRoomService_createRoom) AllocResults() (ChatRoomService_createRoom_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return ChatRoomService_createRoom_Results(r), err
}

// ChatRoomService_joinRoom holds the state for a server call to ChatRoomService.joinRoom.
// See server.Call for documentation.
type ChatRoomService_joinRoom struct {
	*server.Call
}

// Args returns the call's arguments.
func (c ChatRoomService_joinRoom) Args() ChatRoomService_joinRoom_Params {
	return ChatRoomService_joinRoom_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c ChatRoomService_joinRoom) AllocResults() (ChatRoomService_joinRoom_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return ChatRoomService_joinRoom_Results(r), err
}

// ChatRoomService_leaveRoom holds the state for a server call to ChatRoomService.leaveRoom.
// See server.Call for documentation.
type ChatRoomService_leaveRoom struct {
	*server.Call
}

// Args returns the call's arguments.
func (c ChatRoomService_leaveRoom) Args() ChatRoomService_leaveRoom_Params {
	return ChatRoomService_leaveRoom_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c ChatRoomService_leaveRoom) AllocResults() (ChatRoomService_leaveRoom_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return ChatRoomService_leaveRoom_Results(r), err
}

// ChatRoomService_getParticipants holds the state for a server call to ChatRoomService.getParticipants.
// See server.Call for documentation.
type ChatRoomService_getParticipants struct {
	*server.Call
}

// Args returns the call's arguments.
func (c ChatRoomService_getParticipants) Args() ChatRoomService_getParticipants_Params {
	return ChatRoomService_getParticipants_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c ChatRoomService_getParticipants) AllocResults() (ChatRoomService_getParticipants_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ChatRoomService_getParticipants_Results(r), err
}

// ChatRoomService_List is a list of ChatRoomService.
type ChatRoomService_List = capnp.CapList[ChatRoomService]

// NewChatRoomService creates a new list of ChatRoomService.
func NewChatRoomService_List(s *capnp.Segment, sz int32) (ChatRoomService_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[ChatRoomService](l), err
}

type ChatRoomService_createRoom_Params capnp.Struct

// ChatRoomService_createRoom_Params_TypeID is the unique identifier for the type ChatRoomService_createRoom_Params.
const ChatRoomService_createRoom_Params_TypeID = 0xebab2e6d270050d0

func NewChatRoomService_createRoom_Params(s *capnp.Segment) (ChatRoomService_createRoom_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return ChatRoomService_createRoom_Params(st), err
}

func NewRootChatRoomService_createRoom_Params(s *capnp.Segment) (ChatRoomService_createRoom_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return ChatRoomService_createRoom_Params(st), err
}

func ReadRootChatRoomService_createRoom_Params(msg *capnp.Message) (ChatRoomService_createRoom_Params, error) {
	root, err := msg.Root()
	return ChatRoomService_createRoom_Params(root.Struct()), err
}

func (s ChatRoomService_createRoom_Params) String() string {
	str, _ := text.Marshal(0xebab2e6d270050d0, capnp.Struct(s))
	return str
}

func (s ChatRoomService_createRoom_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ChatRoomService_createRoom_Params) DecodeFromPtr(p capnp.Ptr) ChatRoomService_createRoom_Params {
	return ChatRoomService_createRoom_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ChatRoomService_createRoom_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ChatRoomService_createRoom_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ChatRoomService_createRoom_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ChatRoomService_createRoom_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ChatRoomService_createRoom_Params) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s ChatRoomService_createRoom_Params) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ChatRoomService_createRoom_Params) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s ChatRoomService_createRoom_Params) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s ChatRoomService_createRoom_Params) Participants() (UserId_List, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return UserId_List(p.List()), err
}

func (s ChatRoomService_createRoom_Params) HasParticipants() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s ChatRoomService_createRoom_Params) SetParticipants(v UserId_List) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewParticipants sets the participants field to a newly
// allocated UserId_List, preferring placement in s's segment.
func (s ChatRoomService_createRoom_Params) NewParticipants(n int32) (UserId_List, error) {
	l, err := NewUserId_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return UserId_List{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}

// ChatRoomService_createRoom_Params_List is a list of ChatRoomService_createRoom_Params.
type ChatRoomService_createRoom_Params_List = capnp.StructList[ChatRoomService_createRoom_Params]

// NewChatRoomService_createRoom_Params creates a new list of ChatRoomService_createRoom_Params.
func NewChatRoomService_createRoom_Params_List(s *capnp.Segment, sz int32) (ChatRoomService_createRoom_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[ChatRoomService_createRoom_Params](l), err
}

// ChatRoomService_createRoom_Params_Future is a wrapper for a ChatRoomService_createRoom_Params promised by a client call.
type ChatRoomService_createRoom_Params_Future struct{ *capnp.Future }

func (f ChatRoomService_createRoom_Params_Future) Struct() (ChatRoomService_createRoom_Params, error) {
	p, err := f.Future.Ptr()
	return ChatRoomService_createRoom_Params(p.Struct()), err
}

type ChatRoomService_createRoom_Results capnp.Struct

// ChatRoomService_createRoom_Results_TypeID is the unique identifier for the type ChatRoomService_createRoom_Results.
const ChatRoomService_createRoom_Results_TypeID = 0xd56a821256fa6110

func NewChatRoomService_createRoom_Results(s *capnp.Segment) (ChatRoomService_createRoom_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return ChatRoomService_createRoom_Results(st), err
}

func NewRootChatRoomService_createRoom_Results(s *capnp.Segment) (ChatRoomService_createRoom_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return ChatRoomService_createRoom_Results(st), err
}

func ReadRootChatRoomService_createRoom_Results(msg *capnp.Message) (ChatRoomService_createRoom_Results, error) {
	root, err := msg.Root()
	return ChatRoomService_createRoom_Results(root.Struct()), err
}

func (s ChatRoomService_createRoom_Results) String() string {
	str, _ := text.Marshal(0xd56a821256fa6110, capnp.Struct(s))
	return str
}

func (s ChatRoomService_createRoom_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ChatRoomService_createRoom_Results) DecodeFromPtr(p capnp.Ptr) ChatRoomService_createRoom_Results {
	return ChatRoomService_createRoom_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ChatRoomService_createRoom_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ChatRoomService_createRoom_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ChatRoomService_createRoom_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ChatRoomService_createRoom_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ChatRoomService_createRoom_Results) RoomId() uint64 {
	return capnp.Struct(s).Uint64(0)
}

func (s ChatRoomService_createRoom_Results) SetRoomId(v uint64) {
	capnp.Struct(s).SetUint64(0, v)
}

// ChatRoomService_createRoom_Results_List is a list of ChatRoomService_createRoom_Results.
type ChatRoomService_createRoom_Results_List = capnp.StructList[ChatRoomService_createRoom_Results]

// NewChatRoomService_createRoom_Results creates a new list of ChatRoomService_createRoom_Results.
func NewChatRoomService_createRoom_Results_List(s *capnp.Segment, sz int32) (ChatRoomService_createRoom_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[ChatRoomService_createRoom_Results](l), err
}

// ChatRoomService_createRoom_Results_Future is a wrapper for a ChatRoomService_createRoom_Results promised by a client call.
type ChatRoomService_createRoom_Results_Future struct{ *capnp.Future }

func (f ChatRoomService_createRoom_Results_Future) Struct() (ChatRoomService_createRoom_Results, error) {
	p, err := f.Future.Ptr()
	return ChatRoomService_createRoom_Results(p.Struct()), err
}

type ChatRoomService_joinRoom_Params capnp.Struct

// ChatRoomService_joinRoom_Params_TypeID is the unique identifier for the type ChatRoomService_joinRoom_Params.
const ChatRoomService_joinRoom_Params_TypeID = 0x842063b17672cc33

func NewChatRoomService_joinRoom_Params(s *capnp.Segment) (ChatRoomService_joinRoom_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return ChatRoomService_joinRoom_Params(st), err
}

func NewRootChatRoomService_joinRoom_Params(s *capnp.Segment) (ChatRoomService_joinRoom_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return ChatRoomService_joinRoom_Params(st), err
}

func ReadRootChatRoomService_joinRoom_Params(msg *capnp.Message) (ChatRoomService_joinRoom_Params, error) {
	root, err := msg.Root()
	return ChatRoomService_joinRoom_Params(root.Struct()), err
}

func (s ChatRoomService_joinRoom_Params) String() string {
	str, _ := text.Marshal(0x842063b17672cc33, capnp.Struct(s))
	return str
}

func (s ChatRoomService_joinRoom_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ChatRoomService_joinRoom_Params) DecodeFromPtr(p capnp.Ptr) ChatRoomService_joinRoom_Params {
	return ChatRoomService_joinRoom_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ChatRoomService_joinRoom_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ChatRoomService_joinRoom_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ChatRoomService_joinRoom_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ChatRoomService_joinRoom_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ChatRoomService_joinRoom_Params) RoomId() uint64 {
	return capnp.Struct(s).Uint64(0)
}

func (s ChatRoomService_joinRoom_Params) SetRoomId(v uint64) {
	capnp.Struct(s).SetUint64(0, v)
}

func (s ChatRoomService_joinRoom_Params) UserId() (UserId, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return UserId(p.Struct()), err
}

func (s ChatRoomService_joinRoom_Params) HasUserId() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ChatRoomService_joinRoom_Params) SetUserId(v UserId) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewUserId sets the userId field to a newly
// allocated UserId struct, preferring placement in s's segment.
func (s ChatRoomService_joinRoom_Params) NewUserId() (UserId, error) {
	ss, err := NewUserId(capnp.Struct(s).Segment())
	if err != nil {
		return UserId{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// ChatRoomService_joinRoom_Params_List is a list of ChatRoomService_joinRoom_Params.
type ChatRoomService_joinRoom_Params_List = capnp.StructList[ChatRoomService_joinRoom_Params]

// NewChatRoomService_joinRoom_Params creates a new list of ChatRoomService_joinRoom_Params.
func NewChatRoomService_joinRoom_Params_List(s *capnp.Segment, sz int32) (ChatRoomService_joinRoom_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[ChatRoomService_joinRoom_Params](l), err
}

// ChatRoomService_joinRoom_Params_Future is a wrapper for a ChatRoomService_joinRoom_Params promised by a client call.
type ChatRoomService_joinRoom_Params_Future struct{ *capnp.Future }

func (f ChatRoomService_joinRoom_Params_Future) Struct() (ChatRoomService_joinRoom_Params, error) {
	p, err := f.Future.Ptr()
	return ChatRoomService_joinRoom_Params(p.Struct()), err
}
func (p ChatRoomService_joinRoom_Params_Future) UserId() UserId_Future {
	return UserId_Future{Future: p.Future.Field(0, nil)}
}

type ChatRoomService_joinRoom_Results capnp.Struct

// ChatRoomService_joinRoom_Results_TypeID is the unique identifier for the type ChatRoomService_joinRoom_Results.
const ChatRoomService_joinRoom_Results_TypeID = 0x8f0e60783243d746

func NewChatRoomService_joinRoom_Results(s *capnp.Segment) (ChatRoomService_joinRoom_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return ChatRoomService_joinRoom_Results(st), err
}

func NewRootChatRoomService_joinRoom_Results(s *capnp.Segment) (ChatRoomService_joinRoom_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return ChatRoomService_joinRoom_Results(st), err
}

func ReadRootChatRoomService_joinRoom_Results(msg *capnp.Message) (ChatRoomService_joinRoom_Results, error) {
	root, err := msg.Root()
	return ChatRoomService_joinRoom_Results(root.Struct()), err
}

func (s ChatRoomService_joinRoom_Results) String() string {
	str, _ := text.Marshal(0x8f0e60783243d746, capnp.Struct(s))
	return str
}

func (s ChatRoomService_joinRoom_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ChatRoomService_joinRoom_Results) DecodeFromPtr(p capnp.Ptr) ChatRoomService_joinRoom_Results {
	return ChatRoomService_joinRoom_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ChatRoomService_joinRoom_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ChatRoomService_joinRoom_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ChatRoomService_joinRoom_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ChatRoomService_joinRoom_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ChatRoomService_joinRoom_Results) Success() bool {
	return capnp.Struct(s).Bit(0)
}

func (s ChatRoomService_joinRoom_Results) SetSuccess(v bool) {
	capnp.Struct(s).SetBit(0, v)
}

// ChatRoomService_joinRoom_Results_List is a list of ChatRoomService_joinRoom_Results.
type ChatRoomService_joinRoom_Results_List = capnp.StructList[ChatRoomService_joinRoom_Results]

// NewChatRoomService_joinRoom_Results creates a new list of ChatRoomService_joinRoom_Results.
func NewChatRoomService_joinRoom_Results_List(s *capnp.Segment, sz int32) (ChatRoomService_joinRoom_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[ChatRoomService_joinRoom_Results](l), err
}

// ChatRoomService_joinRoom_Results_Future is a wrapper for a ChatRoomService_joinRoom_Results promised by a client call.
type ChatRoomService_joinRoom_Results_Future struct{ *capnp.Future }

func (f ChatRoomService_joinRoom_Results_Future) Struct() (ChatRoomService_joinRoom_Results, error) {
	p, err := f.Future.Ptr()
	return ChatRoomService_joinRoom_Results(p.Struct()), err
}

type ChatRoomService_leaveRoom_Params capnp.Struct

// ChatRoomService_leaveRoom_Params_TypeID is the unique identifier for the type ChatRoomService_leaveRoom_Params.
const ChatRoomService_leaveRoom_Params_TypeID = 0xf44ad9dfe0ae1a9c

func NewChatRoomService_leaveRoom_Params(s *capnp.Segment) (ChatRoomService_leaveRoom_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return ChatRoomService_leaveRoom_Params(st), err
}

func NewRootChatRoomService_leaveRoom_Params(s *capnp.Segment) (ChatRoomService_leaveRoom_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return ChatRoomService_leaveRoom_Params(st), err
}

func ReadRootChatRoomService_leaveRoom_Params(msg *capnp.Message) (ChatRoomService_leaveRoom_Params, error) {
	root, err := msg.Root()
	return ChatRoomService_leaveRoom_Params(root.Struct()), err
}

func (s ChatRoomService_leaveRoom_Params) String() string {
	str, _ := text.Marshal(0xf44ad9dfe0ae1a9c, capnp.Struct(s))
	return str
}

func (s ChatRoomService_leaveRoom_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ChatRoomService_leaveRoom_Params) DecodeFromPtr(p capnp.Ptr) ChatRoomService_leaveRoom_Params {
	return ChatRoomService_leaveRoom_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ChatRoomService_leaveRoom_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ChatRoomService_leaveRoom_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ChatRoomService_leaveRoom_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ChatRoomService_leaveRoom_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ChatRoomService_leaveRoom_Params) RoomId() uint64 {
	return capnp.Struct(s).Uint64(0)
}

func (s ChatRoomService_leaveRoom_Params) SetRoomId(v uint64) {
	capnp.Struct(s).SetUint64(0, v)
}

func (s ChatRoomService_leaveRoom_Params) UserId() (UserId, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return UserId(p.Struct()), err
}

func (s ChatRoomService_leaveRoom_Params) HasUserId() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ChatRoomService_leaveRoom_Params) SetUserId(v UserId) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewUserId sets the userId field to a newly
// allocated UserId struct, preferring placement in s's segment.
func (s ChatRoomService_leaveRoom_Params) NewUserId() (UserId, error) {
	ss, err := NewUserId(capnp.Struct(s).Segment())
	if err != nil {
		return UserId{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// ChatRoomService_leaveRoom_Params_List is a list of ChatRoomService_leaveRoom_Params.
type ChatRoomService_leaveRoom_Params_List = capnp.StructList[ChatRoomService_leaveRoom_Params]

// NewChatRoomService_leaveRoom_Params creates a new list of ChatRoomService_leaveRoom_Params.
func NewChatRoomService_leaveRoom_Params_List(s *capnp.Segment, sz int32) (ChatRoomService_leaveRoom_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[ChatRoomService_leaveRoom_Params](l), err
}

// ChatRoomService_leaveRoom_Params_Future is a wrapper for a ChatRoomService_leaveRoom_Params promised by a client call.
type ChatRoomService_leaveRoom_Params_Future struct{ *capnp.Future }

func (f ChatRoomService_leaveRoom_Params_Future) Struct() (ChatRoomService_leaveRoom_Params, error) {
	p, err := f.Future.Ptr()
	return ChatRoomService_leaveRoom_Params(p.Struct()), err
}
func (p ChatRoomService_leaveRoom_Params_Future) UserId() UserId_Future {
	return UserId_Future{Future: p.Future.Field(0, nil)}
}

type ChatRoomService_leaveRoom_Results capnp.Struct

// ChatRoomService_leaveRoom_Results_TypeID is the unique identifier for the type ChatRoomService_leaveRoom_Results.
const ChatRoomService_leaveRoom_Results_TypeID = 0xe75743b2e3d9dabe

func NewChatRoomService_leaveRoom_Results(s *capnp.Segment) (ChatRoomService_leaveRoom_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return ChatRoomService_leaveRoom_Results(st), err
}

func NewRootChatRoomService_leaveRoom_Results(s *capnp.Segment) (ChatRoomService_leaveRoom_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return ChatRoomService_leaveRoom_Results(st), err
}

func ReadRootChatRoomService_leaveRoom_Results(msg *capnp.Message) (ChatRoomService_leaveRoom_Results, error) {
	root, err := msg.Root()
	return ChatRoomService_leaveRoom_Results(root.Struct()), err
}

func (s ChatRoomService_leaveRoom_Results) String() string {
	str, _ := text.Marshal(0xe75743b2e3d9dabe, capnp.Struct(s))
	return str
}

func (s ChatRoomService_leaveRoom_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ChatRoomService_leaveRoom_Results) DecodeFromPtr(p capnp.Ptr) ChatRoomService_leaveRoom_Results {
	return ChatRoomService_leaveRoom_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ChatRoomService_leaveRoom_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ChatRoomService_leaveRoom_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ChatRoomService_leaveRoom_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ChatRoomService_leaveRoom_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// ChatRoomService_leaveRoom_Results_List is a list of ChatRoomService_leaveRoom_Results.
type ChatRoomService_leaveRoom_Results_List = capnp.StructList[ChatRoomService_leaveRoom_Results]

// NewChatRoomService_leaveRoom_Results creates a new list of ChatRoomService_leaveRoom_Results.
func NewChatRoomService_leaveRoom_Results_List(s *capnp.Segment, sz int32) (ChatRoomService_leaveRoom_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[ChatRoomService_leaveRoom_Results](l), err
}

// ChatRoomService_leaveRoom_Results_Future is a wrapper for a ChatRoomService_leaveRoom_Results promised by a client call.
type ChatRoomService_leaveRoom_Results_Future struct{ *capnp.Future }

func (f ChatRoomService_leaveRoom_Results_Future) Struct() (ChatRoomService_leaveRoom_Results, error) {
	p, err := f.Future.Ptr()
	return ChatRoomService_leaveRoom_Results(p.Struct()), err
}

type ChatRoomService_getParticipants_Params capnp.Struct

// ChatRoomService_getParticipants_Params_TypeID is the unique identifier for the type ChatRoomService_getParticipants_Params.
const ChatRoomService_getParticipants_Params_TypeID = 0xed0957310ec7bfe0

func NewChatRoomService_getParticipants_Params(s *capnp.Segment) (ChatRoomService_getParticipants_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return ChatRoomService_getParticipants_Params(st), err
}

func NewRootChatRoomService_getParticipants_Params(s *capnp.Segment) (ChatRoomService_getParticipants_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return ChatRoomService_getParticipants_Params(st), err
}

func ReadRootChatRoomService_getParticipants_Params(msg *capnp.Message) (ChatRoomService_getParticipants_Params, error) {
	root, err := msg.Root()
	return ChatRoomService_getParticipants_Params(root.Struct()), err
}

func (s ChatRoomService_getParticipants_Params) String() string {
	str, _ := text.Marshal(0xed0957310ec7bfe0, capnp.Struct(s))
	return str
}

func (s ChatRoomService_getParticipants_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ChatRoomService_getParticipants_Params) DecodeFromPtr(p capnp.Ptr) ChatRoomService_getParticipants_Params {
	return ChatRoomService_getParticipants_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ChatRoomService_getParticipants_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ChatRoomService_getParticipants_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ChatRoomService_getParticipants_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ChatRoomService_getParticipants_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ChatRoomService_getParticipants_Params) RoomId() uint64 {
	return capnp.Struct(s).Uint64(0)
}

func (s ChatRoomService_getParticipants_Params) SetRoomId(v uint64) {
	capnp.Struct(s).SetUint64(0, v)
}

// ChatRoomService_getParticipants_Params_List is a list of ChatRoomService_getParticipants_Params.
type ChatRoomService_getParticipants_Params_List = capnp.StructList[ChatRoomService_getParticipants_Params]

// NewChatRoomService_getParticipants_Params creates a new list of ChatRoomService_getParticipants_Params.
func NewChatRoomService_getParticipants_Params_List(s *capnp.Segment, sz int32) (ChatRoomService_getParticipants_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return capnp.StructList[ChatRoomService_getParticipants_Params](l), err
}

// ChatRoomService_getParticipants_Params_Future is a wrapper for a ChatRoomService_getParticipants_Params promised by a client call.
type ChatRoomService_getParticipants_Params_Future struct{ *capnp.Future }

func (f ChatRoomService_getParticipants_Params_Future) Struct() (ChatRoomService_getParticipants_Params, error) {
	p, err := f.Future.Ptr()
	return ChatRoomService_getParticipants_Params(p.Struct()), err
}

type ChatRoomService_getParticipants_Results capnp.Struct

// ChatRoomService_getParticipants_Results_TypeID is the unique identifier for the type ChatRoomService_getParticipants_Results.
const ChatRoomService_getParticipants_Results_TypeID = 0x83cd9ddfa5983ded

func NewChatRoomService_getParticipants_Results(s *capnp.Segment) (ChatRoomService_getParticipants_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ChatRoomService_getParticipants_Results(st), err
}

func NewRootChatRoomService_getParticipants_Results(s *capnp.Segment) (ChatRoomService_getParticipants_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ChatRoomService_getParticipants_Results(st), err
}

func ReadRootChatRoomService_getParticipants_Results(msg *capnp.Message) (ChatRoomService_getParticipants_Results, error) {
	root, err := msg.Root()
	return ChatRoomService_getParticipants_Results(root.Struct()), err
}

func (s ChatRoomService_getParticipants_Results) String() string {
	str, _ := text.Marshal(0x83cd9ddfa5983ded, capnp.Struct(s))
	return str
}

func (s ChatRoomService_getParticipants_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ChatRoomService_getParticipants_Results) DecodeFromPtr(p capnp.Ptr) ChatRoomService_getParticipants_Results {
	return ChatRoomService_getParticipants_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ChatRoomService_getParticipants_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ChatRoomService_getParticipants_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ChatRoomService_getParticipants_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ChatRoomService_getParticipants_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ChatRoomService_getParticipants_Results) Participants() (UserId_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return UserId_List(p.List()), err
}

func (s ChatRoomService_getParticipants_Results) HasParticipants() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ChatRoomService_getParticipants_Results) SetParticipants(v UserId_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewParticipants sets the participants field to a newly
// allocated UserId_List, preferring placement in s's segment.
func (s ChatRoomService_getParticipants_Results) NewParticipants(n int32) (UserId_List, error) {
	l, err := NewUserId_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return UserId_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// ChatRoomService_getParticipants_Results_List is a list of ChatRoomService_getParticipants_Results.
type ChatRoomService_getParticipants_Results_List = capnp.StructList[ChatRoomService_getParticipants_Results]

// NewChatRoomService_getParticipants_Results creates a new list of ChatRoomService_getParticipants_Results.
func NewChatRoomService_getParticipants_Results_List(s *capnp.Segment, sz int32) (ChatRoomService_getParticipants_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[ChatRoomService_getParticipants_Results](l), err
}

// ChatRoomService_getParticipants_Results_Future is a wrapper for a ChatRoomService_getParticipants_Results promised by a client call.
type ChatRoomService_getParticipants_Results_Future struct{ *capnp.Future }

func (f ChatRoomService_getParticipants_Results_Future) Struct() (ChatRoomService_getParticipants_Results, error) {
	p, err := f.Future.Ptr()
	return ChatRoomService_getParticipants_Results(p.Struct()), err
}

type LocalHistoryService capnp.Client

// LocalHistoryService_TypeID is the unique identifier for the type LocalHistoryService.
const LocalHistoryService_TypeID = 0xb8caf4cac1ec165b

func (c LocalHistoryService) SaveHistory(ctx context.Context, params func(LocalHistoryService_saveHistory_Params) error) (LocalHistoryService_saveHistory_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb8caf4cac1ec165b,
			MethodID:      0,
			InterfaceName: "schema/schema.capnp:LocalHistoryService",
			MethodName:    "saveHistory",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(LocalHistoryService_saveHistory_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return LocalHistoryService_saveHistory_Results_Future{Future: ans.Future()}, release

}

func (c LocalHistoryService) LoadHistory(ctx context.Context, params func(LocalHistoryService_loadHistory_Params) error) (LocalHistoryService_loadHistory_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xb8caf4cac1ec165b,
			MethodID:      1,
			InterfaceName: "schema/schema.capnp:LocalHistoryService",
			MethodName:    "loadHistory",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(LocalHistoryService_loadHistory_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return LocalHistoryService_loadHistory_Results_Future{Future: ans.Future()}, release

}

func (c LocalHistoryService) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c LocalHistoryService) String() string {
	return "LocalHistoryService(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c LocalHistoryService) AddRef() LocalHistoryService {
	return LocalHistoryService(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c LocalHistoryService) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c LocalHistoryService) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c LocalHistoryService) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (LocalHistoryService) DecodeFromPtr(p capnp.Ptr) LocalHistoryService {
	return LocalHistoryService(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c LocalHistoryService) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c LocalHistoryService) IsSame(other LocalHistoryService) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c LocalHistoryService) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c LocalHistoryService) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A LocalHistoryService_Server is a LocalHistoryService with a local implementation.
type LocalHistoryService_Server interface {
	SaveHistory(context.Context, LocalHistoryService_saveHistory) error

	LoadHistory(context.Context, LocalHistoryService_loadHistory) error
}

// LocalHistoryService_NewServer creates a new Server from an implementation of LocalHistoryService_Server.
func LocalHistoryService_NewServer(s LocalHistoryService_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(LocalHistoryService_Methods(nil, s), s, c)
}

// LocalHistoryService_ServerToClient creates a new Client from an implementation of LocalHistoryService_Server.
// The caller is responsible for calling Release on the returned Client.
func LocalHistoryService_ServerToClient(s LocalHistoryService_Server) LocalHistoryService {
	return LocalHistoryService(capnp.NewClient(LocalHistoryService_NewServer(s)))
}

// LocalHistoryService_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func LocalHistoryService_Methods(methods []server.Method, s LocalHistoryService_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb8caf4cac1ec165b,
			MethodID:      0,
			InterfaceName: "schema/schema.capnp:LocalHistoryService",
			MethodName:    "saveHistory",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.SaveHistory(ctx, LocalHistoryService_saveHistory{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb8caf4cac1ec165b,
			MethodID:      1,
			InterfaceName: "schema/schema.capnp:LocalHistoryService",
			MethodName:    "loadHistory",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.LoadHistory(ctx, LocalHistoryService_loadHistory{call})
		},
	})

	return methods
}

// LocalHistoryService_saveHistory holds the state for a server call to LocalHistoryService.saveHistory.
// See server.Call for documentation.
type LocalHistoryService_saveHistory struct {
	*server.Call
}

// Args returns the call's arguments.
func (c LocalHistoryService_saveHistory) Args() LocalHistoryService_saveHistory_Params {
	return LocalHistoryService_saveHistory_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c LocalHistoryService_saveHistory) AllocResults() (LocalHistoryService_saveHistory_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return LocalHistoryService_saveHistory_Results(r), err
}

// LocalHistoryService_loadHistory holds the state for a server call to LocalHistoryService.loadHistory.
// See server.Call for documentation.
type LocalHistoryService_loadHistory struct {
	*server.Call
}

// Args returns the call's arguments.
func (c LocalHistoryService_loadHistory) Args() LocalHistoryService_loadHistory_Params {
	return LocalHistoryService_loadHistory_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c LocalHistoryService_loadHistory) AllocResults() (LocalHistoryService_loadHistory_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return LocalHistoryService_loadHistory_Results(r), err
}

// LocalHistoryService_List is a list of LocalHistoryService.
type LocalHistoryService_List = capnp.CapList[LocalHistoryService]

// NewLocalHistoryService creates a new list of LocalHistoryService.
func NewLocalHistoryService_List(s *capnp.Segment, sz int32) (LocalHistoryService_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[LocalHistoryService](l), err
}

type LocalHistoryService_saveHistory_Params capnp.Struct

// LocalHistoryService_saveHistory_Params_TypeID is the unique identifier for the type LocalHistoryService_saveHistory_Params.
const LocalHistoryService_saveHistory_Params_TypeID = 0xf590a484128eda3e

func NewLocalHistoryService_saveHistory_Params(s *capnp.Segment) (LocalHistoryService_saveHistory_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return LocalHistoryService_saveHistory_Params(st), err
}

func NewRootLocalHistoryService_saveHistory_Params(s *capnp.Segment) (LocalHistoryService_saveHistory_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return LocalHistoryService_saveHistory_Params(st), err
}

func ReadRootLocalHistoryService_saveHistory_Params(msg *capnp.Message) (LocalHistoryService_saveHistory_Params, error) {
	root, err := msg.Root()
	return LocalHistoryService_saveHistory_Params(root.Struct()), err
}

func (s LocalHistoryService_saveHistory_Params) String() string {
	str, _ := text.Marshal(0xf590a484128eda3e, capnp.Struct(s))
	return str
}

func (s LocalHistoryService_saveHistory_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (LocalHistoryService_saveHistory_Params) DecodeFromPtr(p capnp.Ptr) LocalHistoryService_saveHistory_Params {
	return LocalHistoryService_saveHistory_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s LocalHistoryService_saveHistory_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s LocalHistoryService_saveHistory_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s LocalHistoryService_saveHistory_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s LocalHistoryService_saveHistory_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s LocalHistoryService_saveHistory_Params) History() (LocalChatHistory, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return LocalChatHistory(p.Struct()), err
}

func (s LocalHistoryService_saveHistory_Params) HasHistory() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s LocalHistoryService_saveHistory_Params) SetHistory(v LocalChatHistory) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewHistory sets the history field to a newly
// allocated LocalChatHistory struct, preferring placement in s's segment.
func (s LocalHistoryService_saveHistory_Params) NewHistory() (LocalChatHistory, error) {
	ss, err := NewLocalChatHistory(capnp.Struct(s).Segment())
	if err != nil {
		return LocalChatHistory{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// LocalHistoryService_saveHistory_Params_List is a list of LocalHistoryService_saveHistory_Params.
type LocalHistoryService_saveHistory_Params_List = capnp.StructList[LocalHistoryService_saveHistory_Params]

// NewLocalHistoryService_saveHistory_Params creates a new list of LocalHistoryService_saveHistory_Params.
func NewLocalHistoryService_saveHistory_Params_List(s *capnp.Segment, sz int32) (LocalHistoryService_saveHistory_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[LocalHistoryService_saveHistory_Params](l), err
}

// LocalHistoryService_saveHistory_Params_Future is a wrapper for a LocalHistoryService_saveHistory_Params promised by a client call.
type LocalHistoryService_saveHistory_Params_Future struct{ *capnp.Future }

func (f LocalHistoryService_saveHistory_Params_Future) Struct() (LocalHistoryService_saveHistory_Params, error) {
	p, err := f.Future.Ptr()
	return LocalHistoryService_saveHistory_Params(p.Struct()), err
}
func (p LocalHistoryService_saveHistory_Params_Future) History() LocalChatHistory_Future {
	return LocalChatHistory_Future{Future: p.Future.Field(0, nil)}
}

type LocalHistoryService_saveHistory_Results capnp.Struct

// LocalHistoryService_saveHistory_Results_TypeID is the unique identifier for the type LocalHistoryService_saveHistory_Results.
const LocalHistoryService_saveHistory_Results_TypeID = 0xa2f5e4faa0c36479

func NewLocalHistoryService_saveHistory_Results(s *capnp.Segment) (LocalHistoryService_saveHistory_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return LocalHistoryService_saveHistory_Results(st), err
}

func NewRootLocalHistoryService_saveHistory_Results(s *capnp.Segment) (LocalHistoryService_saveHistory_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return LocalHistoryService_saveHistory_Results(st), err
}

func ReadRootLocalHistoryService_saveHistory_Results(msg *capnp.Message) (LocalHistoryService_saveHistory_Results, error) {
	root, err := msg.Root()
	return LocalHistoryService_saveHistory_Results(root.Struct()), err
}

func (s LocalHistoryService_saveHistory_Results) String() string {
	str, _ := text.Marshal(0xa2f5e4faa0c36479, capnp.Struct(s))
	return str
}

func (s LocalHistoryService_saveHistory_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (LocalHistoryService_saveHistory_Results) DecodeFromPtr(p capnp.Ptr) LocalHistoryService_saveHistory_Results {
	return LocalHistoryService_saveHistory_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s LocalHistoryService_saveHistory_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s LocalHistoryService_saveHistory_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s LocalHistoryService_saveHistory_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s LocalHistoryService_saveHistory_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// LocalHistoryService_saveHistory_Results_List is a list of LocalHistoryService_saveHistory_Results.
type LocalHistoryService_saveHistory_Results_List = capnp.StructList[LocalHistoryService_saveHistory_Results]

// NewLocalHistoryService_saveHistory_Results creates a new list of LocalHistoryService_saveHistory_Results.
func NewLocalHistoryService_saveHistory_Results_List(s *capnp.Segment, sz int32) (LocalHistoryService_saveHistory_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[LocalHistoryService_saveHistory_Results](l), err
}

// LocalHistoryService_saveHistory_Results_Future is a wrapper for a LocalHistoryService_saveHistory_Results promised by a client call.
type LocalHistoryService_saveHistory_Results_Future struct{ *capnp.Future }

func (f LocalHistoryService_saveHistory_Results_Future) Struct() (LocalHistoryService_saveHistory_Results, error) {
	p, err := f.Future.Ptr()
	return LocalHistoryService_saveHistory_Results(p.Struct()), err
}

type LocalHistoryService_loadHistory_Params capnp.Struct

// LocalHistoryService_loadHistory_Params_TypeID is the unique identifier for the type LocalHistoryService_loadHistory_Params.
const LocalHistoryService_loadHistory_Params_TypeID = 0xbb0111304ab74699

func NewLocalHistoryService_loadHistory_Params(s *capnp.Segment) (LocalHistoryService_loadHistory_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return LocalHistoryService_loadHistory_Params(st), err
}

func NewRootLocalHistoryService_loadHistory_Params(s *capnp.Segment) (LocalHistoryService_loadHistory_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return LocalHistoryService_loadHistory_Params(st), err
}

func ReadRootLocalHistoryService_loadHistory_Params(msg *capnp.Message) (LocalHistoryService_loadHistory_Params, error) {
	root, err := msg.Root()
	return LocalHistoryService_loadHistory_Params(root.Struct()), err
}

func (s LocalHistoryService_loadHistory_Params) String() string {
	str, _ := text.Marshal(0xbb0111304ab74699, capnp.Struct(s))
	return str
}

func (s LocalHistoryService_loadHistory_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (LocalHistoryService_loadHistory_Params) DecodeFromPtr(p capnp.Ptr) LocalHistoryService_loadHistory_Params {
	return LocalHistoryService_loadHistory_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s LocalHistoryService_loadHistory_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s LocalHistoryService_loadHistory_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s LocalHistoryService_loadHistory_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s LocalHistoryService_loadHistory_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// LocalHistoryService_loadHistory_Params_List is a list of LocalHistoryService_loadHistory_Params.
type LocalHistoryService_loadHistory_Params_List = capnp.StructList[LocalHistoryService_loadHistory_Params]

// NewLocalHistoryService_loadHistory_Params creates a new list of LocalHistoryService_loadHistory_Params.
func NewLocalHistoryService_loadHistory_Params_List(s *capnp.Segment, sz int32) (LocalHistoryService_loadHistory_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[LocalHistoryService_loadHistory_Params](l), err
}

// LocalHistoryService_loadHistory_Params_Future is a wrapper for a LocalHistoryService_loadHistory_Params promised by a client call.
type LocalHistoryService_loadHistory_Params_Future struct{ *capnp.Future }

func (f LocalHistoryService_loadHistory_Params_Future) Struct() (LocalHistoryService_loadHistory_Params, error) {
	p, err := f.Future.Ptr()
	return LocalHistoryService_loadHistory_Params(p.Struct()), err
}

type LocalHistoryService_loadHistory_Results capnp.Struct

// LocalHistoryService_loadHistory_Results_TypeID is the unique identifier for the type LocalHistoryService_loadHistory_Results.
const LocalHistoryService_loadHistory_Results_TypeID = 0x91eb5f4949226a42

func NewLocalHistoryService_loadHistory_Results(s *capnp.Segment) (LocalHistoryService_loadHistory_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return LocalHistoryService_loadHistory_Results(st), err
}

func NewRootLocalHistoryService_loadHistory_Results(s *capnp.Segment) (LocalHistoryService_loadHistory_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return LocalHistoryService_loadHistory_Results(st), err
}

func ReadRootLocalHistoryService_loadHistory_Results(msg *capnp.Message) (LocalHistoryService_loadHistory_Results, error) {
	root, err := msg.Root()
	return LocalHistoryService_loadHistory_Results(root.Struct()), err
}

func (s LocalHistoryService_loadHistory_Results) String() string {
	str, _ := text.Marshal(0x91eb5f4949226a42, capnp.Struct(s))
	return str
}

func (s LocalHistoryService_loadHistory_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (LocalHistoryService_loadHistory_Results) DecodeFromPtr(p capnp.Ptr) LocalHistoryService_loadHistory_Results {
	return LocalHistoryService_loadHistory_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s LocalHistoryService_loadHistory_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s LocalHistoryService_loadHistory_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s LocalHistoryService_loadHistory_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s LocalHistoryService_loadHistory_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s LocalHistoryService_loadHistory_Results) History() (LocalChatHistory, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return LocalChatHistory(p.Struct()), err
}

func (s LocalHistoryService_loadHistory_Results) HasHistory() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s LocalHistoryService_loadHistory_Results) SetHistory(v LocalChatHistory) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewHistory sets the history field to a newly
// allocated LocalChatHistory struct, preferring placement in s's segment.
func (s LocalHistoryService_loadHistory_Results) NewHistory() (LocalChatHistory, error) {
	ss, err := NewLocalChatHistory(capnp.Struct(s).Segment())
	if err != nil {
		return LocalChatHistory{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// LocalHistoryService_loadHistory_Results_List is a list of LocalHistoryService_loadHistory_Results.
type LocalHistoryService_loadHistory_Results_List = capnp.StructList[LocalHistoryService_loadHistory_Results]

// NewLocalHistoryService_loadHistory_Results creates a new list of LocalHistoryService_loadHistory_Results.
func NewLocalHistoryService_loadHistory_Results_List(s *capnp.Segment, sz int32) (LocalHistoryService_loadHistory_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[LocalHistoryService_loadHistory_Results](l), err
}

// LocalHistoryService_loadHistory_Results_Future is a wrapper for a LocalHistoryService_loadHistory_Results promised by a client call.
type LocalHistoryService_loadHistory_Results_Future struct{ *capnp.Future }

func (f LocalHistoryService_loadHistory_Results_Future) Struct() (LocalHistoryService_loadHistory_Results, error) {
	p, err := f.Future.Ptr()
	return LocalHistoryService_loadHistory_Results(p.Struct()), err
}
func (p LocalHistoryService_loadHistory_Results_Future) History() LocalChatHistory_Future {
	return LocalChatHistory_Future{Future: p.Future.Field(0, nil)}
}

const schema_b068ff5fb1c4f77e = "x\xda\xbcWml\x14U\x17>\xe7\xce\xeeNw\xdb" +
	"\xd2\x0eS\xde\x04\xc8\xfb\xf6\x85,\xa1\x80EJ!b" +
	"\x15[\x8a m\x0a\xd9Y,MQ\x84q\xf6f;" +
	"Mw\xa7\xccl+\x8dA\x04I\xf8\x05(Fc\x0d" +
	"$Z1F\x09H1\x88h\xd4\x14%F\xa2Fb" +
	"\x8ci\x13\x02b\x0d\x89\x80&\xc8G\x82?\xc6\xdc\xd9" +
	"\x9d\x8fn\xb7\xed\x16\x13\x7fu\xf6\xce\x99\xf3\xf1\x9c\xe7" +
	"<\xe7vQ\x93\xaf\xceWU\xdc\x12\x02\"m\xf3\x07" +
	"\xcc\xeb\xcb_{\xfb\xe2\xa1o_\x00!\x8c\x00~\xe4" +
	"\x01\xaa\x05\xffe\x04\x14\xe7\xf8k\x01\xcd\xeao\xf4\xee" +
	"~\xe5\xff\xbbA\x0a\xa3c\xd1\xea\xefc\x16\xaa\xff\x19" +
	"@\xf3\xf8\x92w\x9b\x8e\xcd}`/H\x0b\\\x8b\xb3" +
	"\xfe\x1b\xccb\xd0\xb2X\xfd\xd3\xca\xc5\xdb\xb6L\xd9\x9f" +
	"\xf1\xe1c\x06K\x03\xef1\x83U\x01\x16\xa4\xbe}v" +
	"C\xc3\xe6\xab/\x81P\xe1x\xa0\x01+\x8b\x1e\xcb\xe0" +
	"\xf6CM\x17\x0et=\xfb*\x08\xf3\x1c\x83\xde\xc0]" +
	"fp\xd42 \xad\xf5\xd1\x96\x9dgzAX`G" +
	"\xb8\xc0\xde\xfb\xcc\xc2\x97\x87\xb1\xe5\xd4\xe3\x07A(\xe3" +
	"\xcc\xe7\xee|\xd9\xbf\xd9l;\x0e\x80\xd5\xe7\x03\x1bQ" +
	"\xfc5\xc0\x03\x88?\x07\xf6\x88\x0f\xf2<\xc0\x9d\xdf7" +
	"F\xae\x89'\x0fYa,/\xb3\xf8\x1b\xcc\xcb\xaai" +
	"W\xb9\xca\xea\xc3}\xa3\xbcL\xe3g\xa38\x87O\x9b" +
	"\xf2(\x9eg\x8ffO\xec\x8b7\xee\x0e\xdf\xeaK\x17" +
	"d9:\xcd_f\x8e^\xdf\xab\xad\x1b\xd8\xff\xc3;" +
	" \x95!\xba\x9e\xfc\x1c\xcb\xe3(\xff\x9bx\x9a9\x10" +
	"O\xf2W\x00\xcd\xed\xff[\xfc\xe1\xea#\x83\xef3h" +
	"I\xc6O\x7f\x81\x85\xec\xd9\x02\x86\xec\xf4\xa7\xf6}\xea" +
	"S\x97\x9d\x04\xa1\xcc\xeb\x8c\xe1#\xce\x09\x0e\x89UA" +
	"\xf6T\x19d\x10=\xf1\x9fk\x03\xe7n\x9e\xfbhT" +
	"\x09k\x83\xf5(n\xb2,[\x83{\xc4~\xf6d\xf6" +
	"\xae>\xd5\xb8H\xc0O<\x15\xf4\x06\x87X\x05\x1bf" +
	"\x1e\x18\x1eL\xae;\xc3* \x9e\xa0\x84\xd9\xec\x0d\x12" +
	"\x14{-_\xaf\x04Y\x09\xa5\xf2\xdd\x0dSw\xb5\xff" +
	"\xe8\xed}\"\xf41+a{\x88\xa55ufS\xf0" +
	"\xe1\x9d\x1f\x0c\x8fJ\xebP\xa8\x11\xc5\xfe\x90\x85K\xe8" +
	"1q\x90=\x99\x9f\x0d\x0d\xferbe\xcb\x954_" +
	"-o\x03\xa1\x13\x08\xbe\xbf\xbe\x8f\xccM,<r5" +
	"\xcdc+\x97~\xf6\x02\xc5\x81\x10C\xea\xd2\xe7_M" +
	"\xa9j\x09^\xf7\xe6QU8dq\xb0\x90\xe5\xb1\xbc" +
	"\xef\xcf\xaf\xd77\xbf\xf5G\x0e(\xabi\xe1|\x14\xbb" +
	"\x0aY*[-\xe3\x833\x8e]\xba8\xd8xs\xc4" +
	"T\xbcYhQ\xba\xbf\x90\xc5{dh\xdf\xd4\xdd\x87" +
	"_\xbc\xe5\xa5tq\x91\x15oVQ-\xe0\x1dE\xae" +
	"h\xfdn\xfam\x8b\xaf\xe9\xd7+\x8a,B7\x17\xd5" +
	"B\xa5i(m4!\xdfo\x04\xac\xbf\x0b\x15\xb93" +
	"\xd9Y\xb3\xb2MNE5-\xb1\x9e\xea\xdd\xaaB\x17" +
	"\xc6i*\"\xeb)UQ;\xe5d\xca\x08G\xa9\xd1" +
	"\xc5w\xa4\x0c\xc9\xc7\xf9\x00|\x08 \x14\xb7\x03HE" +
	"\x1cJ\x15\x04\xcd\xce\x8c1\x940s\x9c\x02\x18\xe1\x10" +
	"K]\x1a\x01\xb2C'\xb8\x7f\xbc\xe0\xed\x9a\x9ad\xbf" +
	"\xc3\x11Y\xe7\xe5\x84!\x158A\xe7\xd5\x00Ha\x0e" +
	"\xa5E\x04\x11\xcb\x18DB%;\xab\xe0PZB\xb0" +
	"V\xd7\xb4DC\x0c\x83@0\x08X\xdbeP\xbd!" +
	"\x96\x95H\xa9'\x91\x11(\xac\xa7J\x97N\xd7R\xc3" +
	"\x90\xe3j2n\xe7c\xd0d,}H\xc3\x91rY" +
	"\xcf#\xa5\xd9c\xa6\xc4'\x8c8\x96\xba\\\xcf\xca'" +
	"?`\xa2\xd4(\xe9\xcajG=\x80T\xc0\xa1TF" +
	"p\x87\xd1\xa5(\xd40\x10\x81 \x8eUm\x93\xa6\xc8" +
	"\x1dkT#\xa5\xe9=v\x84\x0eM\x8ee\x8er\xf6" +
	"\xdc\x1b\xa4-m\x87\xa5.\xc3\xc7\x037B\xa9\xfe\xa8" +
	"j(Z7u\xe3\xc52\x07\xec\xa5\x11\x8e\xd6Rc" +
	"\xac\xb2\xc2\x04wtR\xd6\xcd<\xe85\xd9\xae\xda\x81" +
	"\x1d\x07\xbe\x89\x1cp\x0a\x8d J\x05\x9c\x1f\xc0YT" +
	"h/\x0b\xa1\xeai \xc2<\x1e]\xa5EE\xae\x00" +
	"k.\xff\xcb\xdeM\xe3M;\x01\xe0\xe58\xadC3" +
	"NSV\x0c\xe0\xe3\xd4\xa8\xc3\x08\xde;\x90\x19\x96:" +
	"\xdfsc\xb1\x8aW\xd3u\x94\xb2:l\xa5s\xa5U" +
	"\xd8\xba\x11\x88\xa0\xb2:\xecu\x8d\xf6\xce\x1565\x02" +
	"\x11\x9ay$\x8eh\xa1-\xa2BC\x14\x88\xb0\x82G" +
	"\xce\x91G\xb4/\x04\xc2\xd2]@\x84J\xdeTt*" +
	"\xa7hT\x03NK\xd4\xa1i\x93\x1b\x00\xea\xd0\xec\xa0" +
	"r7\x8dj\x1a`\"\x0d\x8d%G\x98\xd1#\x18\x07" +
	"\x9e\\\xb46\xe4n\x9aMk\xe7k\x92\x0dN\x09K" +
	"#\x8d\x8aMCy\x06\x80\xf4$\x87R\x9b;\xe4t" +
	">\x80\xb4\x85C\xa9\x83\xa0@\xb0\x8c-RAe\xaa" +
	"\xd8\xc6\xa1\xb4\x9b\xa0\xc0\x912\xe4\x00\x84\x9d\x8d\x00\xd2" +
	"\xf3\x1cJ\x07\x09r\xaa#\x05%I9A\xb1\x08\x08" +
	"\x16A\xfe\x12\x9aHs\xd6\x00\x00\xd7\xc8+'\x93\x1d" +
	"\x04\x9bwqjL o\x82\xa3o:\x80t\x1f\x87" +
	"\xd2\xb2Q\xfafv\xc8\x86\xe5\x0f\xca\xe58\xf5\x9c\xe7" +
	"\x84\xbb\xd9\xa0:\xd7\x10c`{f~\x86\xab2\x0c" +
	"\xaeb X\xec\xf1\xe0\x9b\xa0\xdd\xe0N\xa6\xbd,\xd1" +
	"\xbe7y&\xd3\xbe\x88\xa0}It'3C\x17\xe0" +
	"5\xbd\x87\x911\xa3\x8a\x99\xdf\x93\xa2\x9eWQ#\xb2" +
	".s\xe3\x8de\xa6\x0f06\xf9\x9c\x16\xd0(\x80\x14" +
	"\xe3P\xea$\x88$M\xbeDM\x86|)F>L" +
	"\x93o+S\xd0\x0e\x0e\xa5m#\xc8g\xa6\xd4\x045" +
	"Rr\x02\xb0\x13\xfd@\xd0\x0fX\xcb$\x89\xea\xa3\xd7" +
	"\xe5\x0eEK\xa6h2\xe5\x905\xafue\x0f8[" +
	"X9\x94\xbd\xc6\xedr6\x87rv:\x97\xee\x01\xa4" +
	"\xa9\xe3wo\xd8\x9e+\xbd\xa0\x03\x11\x82\xbci\x8b#" +
	"\x94[\xf28\xb2\x83\xe3\x96`\xcb\x10[\xb9\xe5#W" +
	"D\xbe\xa5\xe7\x18\xa9\xf9\xb9F\xaa=3Rk\xc8=" +
	"\x0a\xc3=]\xec2\x94\x9cd_\xb8Q\xacgq\xd6" +
	"\xa8F\x09\xe3y\xd64/v7x9\xf3\xe7)\xc1" +
	"\xf9\x9fe2\xd7C\xb7'\x11\xb9D\xff7\xef\x87\x13" +
	"\xad\x96\x1c`\xfe\x83\x0bS\x1er\x9dk\xac\x1a=\xd7" +
	"\xf2|v\xc5\xdf\x01\x00\x00\xff\xff\xd3\x1b~\x7f"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_b068ff5fb1c4f77e,
		Nodes: []uint64{
			0x83cd9ddfa5983ded,
			0x842063b17672cc33,
			0x8d3727ae4ca934b0,
			0x8f0e60783243d746,
			0x91eb5f4949226a42,
			0x967b7592dd4c3bf6,
			0x99c2815752425902,
			0x9c54b75701e4930b,
			0x9db513ec00505aee,
			0xa2a4332d03eb1545,
			0xa2f5e4faa0c36479,
			0xa7d38fc14e6f8d9a,
			0xafd9ab46b6321e7d,
			0xb5386904bd8e5e19,
			0xb8caf4cac1ec165b,
			0xbb0111304ab74699,
			0xc24e6ed9e4921b56,
			0xd56a821256fa6110,
			0xe4b3813c094c1b12,
			0xe75743b2e3d9dabe,
			0xebab2e6d270050d0,
			0xed0957310ec7bfe0,
			0xefa35553c9f3a23d,
			0xf44ad9dfe0ae1a9c,
			0xf590a484128eda3e,
			0xf619ce5900286163,
		},
		Compressed: true,
	})
}
